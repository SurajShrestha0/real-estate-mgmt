/** 
 * @license magicbell v3.1.1
 *
 * Copyright (c) MagicBell Inc. and its affiliates.
 *
 * This source code is licensed under the license found in the
 * LICENSE file in the root directory of this source tree.
 */

"use strict";
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
class MagicBellError extends Error {
  constructor(raw) {
    super(raw.message);
    __publicField(this, "name");
    __publicField(this, "message");
    __publicField(this, "type");
    __publicField(this, "docsUrl");
    __publicField(this, "code");
    __publicField(this, "status");
    __publicField(this, "statusText");
    __publicField(this, "suggestion");
    __publicField(this, "responseBody");
    this.type = this.constructor.name;
    this.name = "MagicBellError";
    this.code = raw.code;
    this.status = raw.status;
    this.statusText = raw.statusText;
    this.responseBody = raw.responseBody;
    this.message = raw.message;
    this.suggestion = raw.suggestion;
    this.docsUrl = raw.docs_url || raw.help_link;
  }
  get docs_url() {
    return this.docsUrl;
  }
}
class InvalidRequestError extends MagicBellError {
}
class UserInputError extends MagicBellError {
}
class APIError extends MagicBellError {
}
class AuthenticationError extends MagicBellError {
}
class PermissionError extends MagicBellError {
}
class RateLimitError extends MagicBellError {
}
class ConnectionError extends MagicBellError {
}
class IdempotencyError extends MagicBellError {
}
class UnknownError extends MagicBellError {
}
class NotFoundError extends MagicBellError {
}
exports.APIError = APIError;
exports.AuthenticationError = AuthenticationError;
exports.ConnectionError = ConnectionError;
exports.IdempotencyError = IdempotencyError;
exports.InvalidRequestError = InvalidRequestError;
exports.MagicBellError = MagicBellError;
exports.NotFoundError = NotFoundError;
exports.PermissionError = PermissionError;
exports.RateLimitError = RateLimitError;
exports.UnknownError = UnknownError;
exports.UserInputError = UserInputError;
//# sourceMappingURL=errors.cjs.map
