/** 
 * @license magicbell v3.1.1
 *
 * Copyright (c) MagicBell Inc. and its affiliates.
 *
 * This source code is licensed under the license found in the
 * LICENSE file in the root directory of this source tree.
 */

"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const crypto = require("crypto");
const _interopDefaultLegacy = (e) => e && typeof e === "object" && "default" in e ? e : { default: e };
const crypto__default = /* @__PURE__ */ _interopDefaultLegacy(crypto);
const dataKeys = ["userExternalId", "userEmail", "id", "_id", "email"];
function getData(data) {
  if (typeof data === "string")
    return data;
  if (typeof data === "object" && !data)
    return "";
  const key = dataKeys.find((key2) => key2 in data && data[key2]);
  return key ? data[key] : "";
}
function createHmac(secret, data) {
  var _a;
  if (!((_a = crypto__default.default) == null ? void 0 : _a.createHmac))
    throw new Error("Your environment does not support crypto.createHmac");
  if (!secret)
    throw new Error(`You'll need to provide a secret to create an HMAC.`);
  const msg = getData(data);
  if (!msg || typeof msg !== "string")
    throw new Error(`You'll need to provide data to create an HMAC.`);
  return crypto__default.default.createHmac("sha256", secret).update(msg).digest("base64");
}
exports.createHmac = createHmac;
//# sourceMappingURL=crypto.cjs.map
