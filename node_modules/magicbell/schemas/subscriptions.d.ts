export declare const CreateSubscriptionsResponseSchema: {
    readonly title: "CreateSubscriptionsResponseSchema";
    readonly type: "object";
    readonly additionalProperties: false;
    readonly properties: {
        readonly categories: {
            readonly type: "array";
            readonly description: "A list of hashes containing the category slug and the reason for the subscription";
            readonly items: {
                readonly type: "object";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly slug: {
                        readonly type: "string";
                        readonly description: "The slug of the category to be subscribed to. * can also be be specified if the subscription should match all categories";
                    };
                    readonly reason: {
                        readonly type: "string";
                        readonly description: "The reason for the subscription";
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly description: "The status of the topic subscription";
                        readonly enum: readonly ["subscribed", "unsubscribed"];
                    };
                };
            };
        };
        readonly topic: {
            readonly type: "string";
            readonly description: "The topic the user should be subscribed to. If the topic does not exist it will be created.";
        };
    };
};
export declare const CreateSubscriptionsPayloadSchema: {
    readonly title: "CreateSubscriptionsPayloadSchema";
    readonly type: "object";
    readonly required: readonly ["categories", "topic"];
    readonly additionalProperties: false;
    readonly properties: {
        readonly categories: {
            readonly type: "array";
            readonly description: "A list of hashes containing the category slug and the reason for the subscription";
            readonly items: {
                readonly type: "object";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly slug: {
                        readonly type: "string";
                        readonly description: "The slug of the category to be subscribed to. * can also be be specified if the subscription should match all categories";
                    };
                    readonly reason: {
                        readonly type: "string";
                        readonly description: "The reason for the subscription";
                    };
                };
            };
        };
        readonly topic: {
            readonly type: "string";
            readonly description: "The topic the user should be subscribed to. If the topic does not exist it will be created.";
        };
    };
};
export declare const UnsubscribeSubscriptionsResponseSchema: {
    readonly title: "UnsubscribeSubscriptionsResponseSchema";
    readonly type: "object";
    readonly additionalProperties: false;
    readonly properties: {
        readonly categories: {
            readonly type: "array";
            readonly description: "A list of hashes containing the category slug and the reason for the subscription";
            readonly items: {
                readonly type: "object";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly slug: {
                        readonly type: "string";
                        readonly description: "The slug of the category to be subscribed to. * can also be be specified if the subscription should match all categories";
                    };
                    readonly reason: {
                        readonly type: "string";
                        readonly description: "The reason for the subscription";
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly description: "The status of the topic subscription";
                        readonly enum: readonly ["subscribed", "unsubscribed"];
                    };
                };
            };
        };
        readonly topic: {
            readonly type: "string";
            readonly description: "The topic the user should be subscribed to. If the topic does not exist it will be created.";
        };
    };
};
export declare const UnsubscribeSubscriptionsPayloadSchema: {
    readonly title: "UnsubscribeSubscriptionsPayloadSchema";
    readonly type: "object";
    readonly required: readonly ["categories"];
    readonly additionalProperties: false;
    readonly properties: {
        readonly categories: {
            readonly type: "array";
            readonly description: "A list of hashes containing the category slug and the reason for the subscription";
            readonly items: {
                readonly type: "object";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly slug: {
                        readonly type: "string";
                        readonly description: "The slug of the category to be subscribed to. * can also be be specified if the subscription should match all categories";
                    };
                    readonly reason: {
                        readonly type: "string";
                        readonly description: "The reason for the subscription";
                    };
                };
            };
        };
    };
};
export declare const ListSubscriptionsResponseSchema: {
    readonly title: "ListSubscriptionsResponseSchema";
    readonly type: "object";
    readonly additionalProperties: false;
    readonly properties: {
        readonly subscriptions: {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly topic: {
                        readonly type: "string";
                    };
                    readonly categories: {
                        readonly type: "array";
                        readonly description: "A list of hashes containing the category slug and the reason for the subscription";
                        readonly items: {
                            readonly type: "object";
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly slug: {
                                    readonly type: "string";
                                    readonly description: "The slug of the category to be subscribed to. * can also be be specified if the subscription should match all categories";
                                };
                                readonly reason: {
                                    readonly type: "string";
                                    readonly description: "The reason for the subscription";
                                };
                                readonly status: {
                                    readonly type: "string";
                                    readonly enum: readonly ["subscribed", "unsubscribed"];
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
export declare const GetSubscriptionsResponseSchema: {
    readonly title: "GetSubscriptionsResponseSchema";
    readonly type: "object";
    readonly additionalProperties: false;
    readonly properties: {
        readonly categories: {
            readonly type: "array";
            readonly description: "A list of hashes containing the category slug and the reason for the subscription";
            readonly items: {
                readonly type: "object";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly slug: {
                        readonly type: "string";
                        readonly description: "The slug of the category to be subscribed to. * can also be be specified if the subscription should match all categories";
                    };
                    readonly reason: {
                        readonly type: "string";
                        readonly description: "The reason for the subscription";
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly description: "The status of the topic subscription";
                        readonly enum: readonly ["subscribed", "unsubscribed"];
                    };
                };
            };
        };
        readonly topic: {
            readonly type: "string";
            readonly description: "The topic the user should be subscribed to. If the topic does not exist it will be created.";
        };
    };
};
export declare const DeleteSubscriptionsPayloadSchema: {
    readonly title: "DeleteSubscriptionsPayloadSchema";
    readonly type: "object";
    readonly properties: {
        readonly categories: {
            readonly type: "array";
            readonly description: "A list of hashes containing the category slug and the reason for the subscription. Omiting categories deletes all topic subscriptions beloning to the topic.";
            readonly items: {
                readonly type: "object";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly slug: {
                        readonly type: "string";
                        readonly description: "The slug of the category to be subscribed to. * can also be be specified if the subscription should match all categories";
                    };
                };
            };
        };
    };
    readonly additionalProperties: false;
};
