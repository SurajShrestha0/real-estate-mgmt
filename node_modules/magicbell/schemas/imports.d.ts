export declare const CreateImportsResponseSchema: {
    readonly title: "CreateImportsResponseSchema";
    readonly type: "object";
    readonly additionalProperties: false;
    readonly properties: {
        readonly id: {
            readonly type: "string";
            readonly description: "ID of the import. This is used to query the status of the import.";
        };
        readonly status: {
            readonly type: "string";
            readonly enum: readonly ["enqueued", "processing", "processed"];
        };
        readonly summary: {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly properties: {
                readonly total: {
                    readonly type: "integer";
                    readonly description: "The total number of records processed.";
                };
                readonly failures: {
                    readonly type: "integer";
                    readonly description: "The total number of failed records.";
                };
            };
        };
        readonly errors: {
            readonly type: "array";
            readonly description: "A list of errors (deprecated - please use failures instead)";
            readonly deprecated: true;
            readonly items: {
                readonly type: "object";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly email: {
                        readonly type: "string";
                        readonly description: "The identifying email of the user. If the user's external_id is used as identifier, the email key will not be present";
                    };
                    readonly external_id: {
                        readonly type: "string";
                        readonly description: "The identifying external_id of the user. If the user's email is used as identifier, the external_id key will not be present";
                    };
                    readonly message: {
                        readonly type: "string";
                        readonly description: "The error message indicating why importing the user failed";
                    };
                };
            };
        };
        readonly failures: {
            readonly type: "object";
            readonly description: "Contains the entities that could not be imported successfully";
            readonly additionalProperties: false;
            readonly properties: {
                readonly users: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "User objects that could not be imported successfully";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly email: {
                                readonly nullable: true;
                                readonly type: "string";
                                readonly description: "The identifying email of the user if supplied in the import request.";
                            };
                            readonly external_id: {
                                readonly nullable: true;
                                readonly type: "string";
                                readonly description: "The identifying external_id of the user if supplied in the import request.";
                            };
                            readonly errors: {
                                readonly type: "object";
                                readonly description: "The errors object reflecting the structure of the user oject";
                            };
                        };
                    };
                };
            };
        };
    };
};
export declare const CreateImportsPayloadSchema: {
    readonly title: "CreateImportsPayloadSchema";
    readonly type: "object";
    readonly additionalProperties: false;
    readonly properties: {
        readonly users: {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly properties: {
                    readonly external_id: {
                        readonly type: "string";
                        readonly description: "A unique string that MagicBell can utilize to identify the user uniquely. We recommend setting this attribute to the ID of the user in your database. Provide the external id if the user's email is unavailable.";
                        readonly maxLength: 255;
                        readonly nullable: true;
                    };
                    readonly email: {
                        readonly type: "string";
                        readonly description: "The user's email.";
                        readonly maxLength: 255;
                        readonly nullable: true;
                    };
                    readonly first_name: {
                        readonly type: "string";
                        readonly description: "The user's first name.";
                        readonly maxLength: 50;
                        readonly nullable: true;
                    };
                    readonly last_name: {
                        readonly type: "string";
                        readonly description: "The user's last name.";
                        readonly maxLength: 50;
                        readonly nullable: true;
                    };
                    readonly custom_attributes: {
                        readonly type: "object";
                        readonly description: "Any customer attributes that you'd like to associate with the user. You may want to use these attributes later when writing email templates, for example.";
                        readonly additionalProperties: true;
                    };
                    readonly phone_numbers: {
                        readonly type: "array";
                        readonly description: "An array of phone numbers to use for sending SMS notifications.";
                        readonly maxItems: 50;
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                    readonly channels: {
                        readonly type: "object";
                        readonly additionalProperties: true;
                    };
                };
            };
        };
    };
};
export declare const GetImportsResponseSchema: {
    readonly title: "GetImportsResponseSchema";
    readonly type: "object";
    readonly additionalProperties: false;
    readonly properties: {
        readonly id: {
            readonly type: "string";
            readonly description: "ID of the import. This is used to query the status of the import.";
        };
        readonly status: {
            readonly type: "string";
            readonly enum: readonly ["enqueued", "processing", "processed"];
        };
        readonly summary: {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly properties: {
                readonly total: {
                    readonly type: "integer";
                    readonly description: "The total number of records processed.";
                };
                readonly failures: {
                    readonly type: "integer";
                    readonly description: "The total number of failed records.";
                };
            };
        };
        readonly errors: {
            readonly type: "array";
            readonly description: "A list of errors (deprecated - please use failures instead)";
            readonly deprecated: true;
            readonly items: {
                readonly type: "object";
                readonly additionalProperties: false;
                readonly properties: {
                    readonly email: {
                        readonly type: "string";
                        readonly description: "The identifying email of the user. If the user's external_id is used as identifier, the email key will not be present";
                    };
                    readonly external_id: {
                        readonly type: "string";
                        readonly description: "The identifying external_id of the user. If the user's email is used as identifier, the external_id key will not be present";
                    };
                    readonly message: {
                        readonly type: "string";
                        readonly description: "The error message indicating why importing the user failed";
                    };
                };
            };
        };
        readonly failures: {
            readonly type: "object";
            readonly description: "Contains the entities that could not be imported successfully";
            readonly additionalProperties: false;
            readonly properties: {
                readonly users: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly description: "User objects that could not be imported successfully";
                        readonly additionalProperties: false;
                        readonly properties: {
                            readonly email: {
                                readonly nullable: true;
                                readonly type: "string";
                                readonly description: "The identifying email of the user if supplied in the import request.";
                            };
                            readonly external_id: {
                                readonly nullable: true;
                                readonly type: "string";
                                readonly description: "The identifying external_id of the user if supplied in the import request.";
                            };
                            readonly errors: {
                                readonly type: "object";
                                readonly description: "The errors object reflecting the structure of the user oject";
                            };
                        };
                    };
                };
            };
        };
    };
};
