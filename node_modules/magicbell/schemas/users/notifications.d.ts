export declare const ListUsersNotificationsResponseSchema: {
    readonly title: "ListUsersNotificationsResponseSchema";
    readonly type: "object";
    readonly required: readonly ["current_page", "notifications", "per_page"];
    readonly properties: {
        readonly per_page: {
            readonly type: "integer";
            readonly description: "Number of entities per page.";
            readonly readOnly: true;
        };
        readonly current_page: {
            readonly type: "integer";
            readonly description: "Number of the page returned.";
            readonly readOnly: true;
        };
        readonly notifications: {
            readonly type: "array";
            readonly items: {
                readonly type: "object";
                readonly required: readonly ["id", "created_at", "updated_at", "status", "recipient", "deliveries"];
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly description: "The unique id for this notification.";
                        readonly readOnly: true;
                    };
                    readonly title: {
                        readonly type: "string";
                        readonly description: "Title of the notification.";
                        readonly nullable: false;
                        readonly maxLength: 255;
                    };
                    readonly category: {
                        readonly type: "string";
                        readonly description: "Category the notification belongs to. This is useful to allow users to set their preferences.";
                        readonly nullable: true;
                        readonly maxLength: 100;
                    };
                    readonly topic: {
                        readonly type: "string";
                        readonly description: "Topic the notification belongs to. This is useful to create threads.";
                        readonly nullable: true;
                        readonly maxLength: 100;
                    };
                    readonly created_at: {
                        readonly type: "string";
                        readonly format: "date-time";
                        readonly nullable: false;
                    };
                    readonly updated_at: {
                        readonly type: "string";
                        readonly format: "date-time";
                        readonly nullable: false;
                    };
                    readonly sent_at: {
                        readonly type: "string";
                        readonly format: "date-time";
                        readonly nullable: true;
                    };
                    readonly read_at: {
                        readonly type: "string";
                        readonly format: "date-time";
                        readonly nullable: true;
                    };
                    readonly seen_at: {
                        readonly type: "string";
                        readonly format: "date-time";
                        readonly nullable: true;
                    };
                    readonly archived_at: {
                        readonly type: "string";
                        readonly format: "date-time";
                        readonly nullable: true;
                    };
                    readonly discarded_at: {
                        readonly type: "string";
                        readonly format: "date-time";
                        readonly nullable: true;
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly enum: readonly ["unseen", "unread", "read", "archived"];
                    };
                    readonly recipient: {
                        readonly type: "object";
                        readonly nullable: false;
                        readonly properties: {
                            readonly user: {
                                readonly nullable: false;
                                readonly type: "object";
                                readonly additionalProperties: false;
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "The unique id for this user.";
                                        readonly readOnly: true;
                                    };
                                    readonly external_id: {
                                        readonly type: "string";
                                        readonly description: "A unique string that MagicBell can utilize to identify the user uniquely. We recommend setting this attribute to the ID of the user in your database. Provide the external id if the user's email is unavailable.";
                                        readonly maxLength: 255;
                                        readonly nullable: true;
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                        readonly description: "The user's email.";
                                        readonly maxLength: 255;
                                        readonly nullable: true;
                                    };
                                    readonly first_name: {
                                        readonly type: "string";
                                        readonly description: "The user's first name.";
                                        readonly maxLength: 50;
                                        readonly nullable: true;
                                    };
                                    readonly last_name: {
                                        readonly type: "string";
                                        readonly description: "The user's last name.";
                                        readonly maxLength: 50;
                                        readonly nullable: true;
                                    };
                                    readonly custom_attributes: {
                                        readonly type: "object";
                                        readonly description: "Any customer attributes that you'd like to associate with the user. You may want to use these attributes later when writing email templates, for example.";
                                        readonly additionalProperties: true;
                                    };
                                    readonly phone_numbers: {
                                        readonly type: "array";
                                        readonly description: "An array of phone numbers to use for sending SMS notifications.";
                                        readonly maxItems: 50;
                                        readonly items: {
                                            readonly type: "string";
                                        };
                                    };
                                };
                            };
                        };
                    };
                    readonly deliveries: {
                        readonly type: "array";
                        readonly nullable: false;
                        readonly items: {
                            readonly type: "object";
                            readonly required: readonly ["id", "title", "channel", "scheduled_at", "status"];
                            readonly additionalProperties: false;
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                    readonly nullable: false;
                                };
                                readonly title: {
                                    readonly type: "string";
                                    readonly nullable: true;
                                };
                                readonly channel: {
                                    readonly type: "string";
                                    readonly nullable: false;
                                };
                                readonly scheduled_at: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                };
                                readonly status: {
                                    readonly type: "string";
                                    readonly description: "The status of the notification delivery.";
                                    readonly enum: readonly ["processing", "scheduled", "sent", "invalid"];
                                    readonly nullable: false;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
export declare const ListUsersNotificationsPayloadSchema: {
    readonly title: "ListUsersNotificationsPayloadSchema";
    readonly type: "object";
    readonly properties: {
        readonly page: {
            readonly title: "page";
            readonly description: "The page number of the paginated response. Defaults to 1.";
            readonly type: "integer";
        };
        readonly per_page: {
            readonly title: "per_page";
            readonly description: "The number of items per page. Defaults to 20.";
            readonly type: "integer";
        };
    };
    readonly additionalProperties: false;
    readonly required: readonly [];
};
