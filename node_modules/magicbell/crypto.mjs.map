{"version":3,"file":"crypto.mjs","sources":["../src/crypto.ts"],"sourcesContent":["import crypto from 'crypto';\n\ntype UserData =\n  | { userExternalId?: string; userEmail: string }\n  | { userExternalId: string; userEmail?: string }\n  | { id: string }\n  | { _id: string }\n  | { email: string };\n\nconst dataKeys = ['userExternalId', 'userEmail', 'id', '_id', 'email'] as const;\nfunction getData(data: UserData | string) {\n  if (typeof data === 'string') return data;\n  if (typeof data === 'object' && !data) return '';\n\n  const key = dataKeys.find((key) => key in data && data[key]);\n  return key ? data[key] : '';\n}\n\nexport function createHmac(secret: string, data: UserData): string;\nexport function createHmac(secret: string, data: string): string;\n\nexport function createHmac(secret: string, data: UserData | string) {\n  if (!crypto?.createHmac) throw new Error('Your environment does not support crypto.createHmac');\n  if (!secret) throw new Error(`You'll need to provide a secret to create an HMAC.`);\n\n  const msg = getData(data);\n  if (!msg || typeof msg !== 'string') throw new Error(`You'll need to provide data to create an HMAC.`);\n\n  return crypto.createHmac('sha256', secret).update(msg).digest('base64');\n}\n"],"names":["key"],"mappings":";AASA,MAAM,WAAW,CAAC,kBAAkB,aAAa,MAAM,OAAO,OAAO;AACrE,SAAS,QAAQ,MAAyB;AACxC,MAAI,OAAO,SAAS;AAAiB,WAAA;AACjC,MAAA,OAAO,SAAS,YAAY,CAAC;AAAa,WAAA;AAExC,QAAA,MAAM,SAAS,KAAK,CAACA,SAAQA,QAAO,QAAQ,KAAKA,KAAI;AACpD,SAAA,MAAM,KAAK,OAAO;AAC3B;AAKgB,SAAA,WAAW,QAAgB,MAAyB;;AAClE,MAAI,GAAC,mCAAQ;AAAkB,UAAA,IAAI,MAAM,qDAAqD;AAC9F,MAAI,CAAC;AAAc,UAAA,IAAI,MAAM,oDAAoD;AAE3E,QAAA,MAAM,QAAQ,IAAI;AACpB,MAAA,CAAC,OAAO,OAAO,QAAQ;AAAgB,UAAA,IAAI,MAAM,gDAAgD;AAE9F,SAAA,OAAO,WAAW,UAAU,MAAM,EAAE,OAAO,GAAG,EAAE,OAAO,QAAQ;AACxE;"}