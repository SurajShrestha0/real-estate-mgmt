"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  deleteEmptyHeaders: () => deleteEmptyHeaders,
  getHeaders: () => getHeaders,
  getRequest: () => getRequest,
  toCurl: () => toCurl
});
module.exports = __toCommonJS(src_exports);

// src/request.ts
function getRequest(input, init) {
  return input instanceof Request ? input : new Request(input, init);
}

// src/headers.ts
function deleteEmptyHeaders(headers) {
  for (const [key, value] of [...headers]) {
    if (value && value !== "undefined" && value !== "null")
      continue;
    headers.delete(key);
  }
}
function getHeaders(headersOrInput, init) {
  if (typeof headersOrInput === "string" || headersOrInput instanceof URL || headersOrInput instanceof Request) {
    return getRequest(headersOrInput, init).headers;
  }
  return headersOrInput instanceof Headers ? headersOrInput : new Headers(headersOrInput);
}

// src/to-curl.ts
async function toCurl(input, init) {
  const request = getRequest(input, init).clone();
  const headers = Array.from(request.headers.entries());
  const data = await request.text();
  return [
    `curl --url ${request.url}`,
    `--request ${request.method.toUpperCase()}`,
    ...headers.map(([key, value]) => `--header '${key}: ${value}'`),
    data && `--data '${data}'`
  ].filter(Boolean).join(" \\\n  ");
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  deleteEmptyHeaders,
  getHeaders,
  getRequest,
  toCurl
});
