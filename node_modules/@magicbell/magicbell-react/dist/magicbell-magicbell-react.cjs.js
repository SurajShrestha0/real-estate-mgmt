/** 
 * @license @magicbell/magicbell-react v10.10.1
 *
 * Copyright (c) MagicBell Inc. and its affiliates.
 *
 * This source code is licensed under the license found in the
 * LICENSE file in the root directory of this source tree.
 */

"use strict";
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const warning = require("tiny-warning");
const jsxRuntime = require("react/jsx-runtime");
const reactHeadless = require("@magicbell/react-headless");
const react = require("react");
const useToggle = require("react-use/lib/useToggle");
const jsxRuntime$1 = require("@emotion/react/jsx-runtime");
const ramda = require("ramda");
const react$1 = require("@emotion/react");
const reactUse = require("react-use");
const tinycolor = require("tinycolor2");
const Tippy = require("@tippyjs/react/headless");
const InfiniteScroll = require("react-infinite-scroll-component");
const timeago_js = require("timeago.js");
const useInterval = require("react-use/lib/useInterval");
const dayjs = require("dayjs");
const localizedFormat = require("dayjs/plugin/localizedFormat");
const relativeTime = require("dayjs/plugin/relativeTime");
const updateLocale = require("dayjs/plugin/updateLocale");
require("dayjs/locale/es");
require("dayjs/locale/pt-br");
require("dayjs/locale/de");
const webpush = require("@magicbell/webpush");
const _interopDefaultLegacy = (e) => e && typeof e === "object" && "default" in e ? e : { default: e };
const warning__default = /* @__PURE__ */ _interopDefaultLegacy(warning);
const useToggle__default = /* @__PURE__ */ _interopDefaultLegacy(useToggle);
const tinycolor__default = /* @__PURE__ */ _interopDefaultLegacy(tinycolor);
const Tippy__default = /* @__PURE__ */ _interopDefaultLegacy(Tippy);
const InfiniteScroll__default = /* @__PURE__ */ _interopDefaultLegacy(InfiniteScroll);
const useInterval__default = /* @__PURE__ */ _interopDefaultLegacy(useInterval);
const dayjs__default = /* @__PURE__ */ _interopDefaultLegacy(dayjs);
const localizedFormat__default = /* @__PURE__ */ _interopDefaultLegacy(localizedFormat);
const relativeTime__default = /* @__PURE__ */ _interopDefaultLegacy(relativeTime);
const updateLocale__default = /* @__PURE__ */ _interopDefaultLegacy(updateLocale);
const MagicBellContext = react.createContext({});
const MagicBellContext$1 = MagicBellContext;
const useMagicBellContext = () => react.useContext(MagicBellContext);
function toRGBA(baseColor, alpha) {
  if (baseColor.startsWith("var("))
    return baseColor;
  const color = tinycolor__default.default(baseColor);
  color.setAlpha(alpha);
  return color.toRgbString();
}
function darken(baseColor, amount) {
  return tinycolor__default.default.mix(baseColor, "black", amount || 50).toRgbString();
}
const merge = ramda.unapply(ramda.pipe(ramda.filter(ramda.compose(ramda.not, ramda.isNil)), ramda.reduce(ramda.mergeDeepRight, {})));
const fonts$1 = {
  sans: `Inter, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif, -apple-system, system`,
  mono: `ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace`
};
const colors$2 = {
  bg: "#FFFFFF",
  caption: "#181B20",
  text: "#3A424D",
  ghost: "#6E7D91",
  stroke: "#EFEEF1",
  accent: "#5225C1",
  badge: "#F80808",
  bgHighlight: "#F8F5FF",
  bgActive: "#F2EDFC",
  transparent: "transparent"
};
const prose = {
  headings: colors$2.caption,
  links: colors$2.caption,
  bold: colors$2.caption,
  hr: colors$2.stroke,
  quotes: colors$2.text,
  quoteBorders: colors$2.stroke,
  captions: colors$2.caption,
  code: colors$2.text,
  preCode: colors$2.stroke,
  preBg: colors$2.text,
  thBorders: colors$2.stroke,
  tdBorders: colors$2.stroke,
  buttonBorders: colors$2.text,
  buttons: colors$2.caption,
  fontMono: fonts$1.mono
};
const icon = {
  borderColor: colors$2.accent,
  width: "24px"
};
const tabs = {
  margin: "-8px 0 -16px 0",
  spacing: "4px",
  fontSize: "12px",
  fontWeight: 500,
  color: colors$2.ghost,
  activeColor: colors$2.accent
};
const header = {
  backgroundColor: colors$2.bg,
  backgroundOpacity: 1,
  borderRadius: "16px",
  fontFamily: fonts$1.sans,
  fontSize: "15px",
  fontWeight: 400,
  textAlign: "left",
  textColor: colors$2.accent,
  textTransform: "none",
  padding: "16px",
  borderColor: colors$2.stroke
};
const footer = __spreadProps(__spreadValues({}, header), {
  fontSize: "12px",
  padding: "8px 16px"
});
const banner = {
  backgroundColor: colors$2.bgHighlight,
  backgroundOpacity: 1,
  textColor: colors$2.text,
  fontFamily: fonts$1.sans,
  textAlign: "left",
  fontSize: "12px",
  boxShadow: `inset 0 1px 0 0 ${colors$2.stroke}`
};
const unseenBadge = {
  backgroundColor: colors$2.badge,
  backgroundOpacity: 1,
  borderColor: "white",
  borderRadius: "4px",
  fontFamily: fonts$1.sans,
  fontWeight: 400,
  fontSize: "9px",
  textAlign: "center",
  textColor: "white",
  textTransform: "none",
  padding: "2px 3px"
};
const container = {
  backgroundColor: colors$2.bg,
  backgroundOpacity: 1,
  borderRadius: "8px",
  fontFamily: fonts$1.sans,
  fontWeight: "inherit",
  fontSize: "16px",
  textAlign: "left",
  textColor: colors$2.text,
  textTransform: "none",
  boxShadow: "0px 0px 6px rgba(0, 0, 0, 0.08), 0px 5px 12px rgba(0, 0, 0, 0.16)",
  borderColor: colors$2.transparent
};
const defaultNotification = {
  backgroundColor: colors$2.bg,
  backgroundOpacity: 1,
  borderRadius: "16px",
  fontFamily: fonts$1.sans,
  fontSize: "12px",
  fontWeight: 400,
  textAlign: "left",
  textColor: colors$2.text,
  textTransform: "none",
  margin: "8px",
  padding: "16px 8px",
  title: {
    fontFamily: "inherit",
    fontSize: "inherit",
    fontWeight: 600,
    textColor: colors$2.caption
  },
  hover: {
    backgroundColor: colors$2.bgActive,
    backgroundOpacity: 1
  },
  state: {
    color: colors$2.transparent
  }
};
const unreadNotification = __spreadProps(__spreadValues({}, defaultNotification), {
  backgroundColor: colors$2.bgHighlight,
  hover: {
    backgroundColor: colors$2.bgActive,
    backgroundOpacity: 1
  },
  state: {
    color: colors$2.accent
  }
});
const dialog = {
  backgroundColor: colors$2.bg,
  textColor: colors$2.text,
  accentColor: colors$2.accent
};
const lightTheme = {
  prose,
  icon,
  tabs,
  header,
  footer,
  banner,
  dialog,
  unseenBadge,
  container,
  notification: {
    default: defaultNotification,
    unread: unreadNotification,
    unseen: unreadNotification
  }
};
const defaultTheme = lightTheme;
const MagicBellThemeContext = react.createContext(defaultTheme);
function MagicBellThemeProvider(_a) {
  var _b = _a, { value: partialTheme = {} } = _b, props = __objRest(_b, ["value"]);
  const theme = react.useMemo(() => {
    var _a2, _b2, _c, _d, _e, _f, _g, _h, _i, _j, _k;
    if (!partialTheme || Object.keys(partialTheme).length === 0)
      return defaultTheme;
    const merged = merge(defaultTheme, partialTheme);
    if (!partialTheme.prose) {
      for (const key of Object.keys(merged.prose).filter((x) => !/code|pre/i.test(x))) {
        merged.prose[key] = merged.notification.default.textColor;
      }
    }
    if (!((_c = (_b2 = (_a2 = partialTheme.notification) == null ? void 0 : _a2.default) == null ? void 0 : _b2.title) == null ? void 0 : _c.textColor)) {
      merged.notification.default.title.textColor = merged.notification.default.textColor;
    }
    for (const variant of ["unseen", "unread"]) {
      merged.notification[variant] = merge(
        merged.notification[variant],
        (_d = partialTheme.notification) == null ? void 0 : _d.default,
        (_e = partialTheme.notification) == null ? void 0 : _e[variant]
      );
    }
    const hasDeclaredHoverStyles = ["default", "unseen", "unread"].some(
      (variant) => {
        var _a3, _b3;
        return Boolean((_b3 = (_a3 = partialTheme.notification) == null ? void 0 : _a3[variant]) == null ? void 0 : _b3.hover);
      }
    );
    if (!hasDeclaredHoverStyles) {
      for (const variant of ["default", "unseen", "unread"]) {
        const current = merged.notification[variant];
        merged.notification[variant].backgroundOpacity = variant === "default" ? 0 : 0.05;
        merged.notification[variant].hover = merge(
          {
            backgroundColor: darken(current.backgroundColor, 5),
            backgroundOpacity: 0.15
          },
          (_g = (_f = partialTheme.notification) == null ? void 0 : _f.default) == null ? void 0 : _g.hover,
          (_i = (_h = partialTheme.notification) == null ? void 0 : _h[variant]) == null ? void 0 : _i.hover
        );
      }
    }
    const hasDeclaredStateStyles = ["default", "unseen", "unread"].some(
      (variant) => {
        var _a3, _b3;
        return Boolean((_b3 = (_a3 = partialTheme.notification) == null ? void 0 : _a3[variant]) == null ? void 0 : _b3.state);
      }
    );
    if (!hasDeclaredStateStyles) {
      for (const variant of ["default", "unseen", "unread"]) {
        const current = merged.notification[variant];
        const color = variant === "default" ? "transparent" : merged.header.backgroundColor;
        merged.notification[variant].state = merge(current.state, { color });
      }
    }
    merged.unseenBadge.borderColor = ((_j = partialTheme == null ? void 0 : partialTheme.unseenBadge) == null ? void 0 : _j.borderColor) || "transparent";
    merged.container.borderColor = ((_k = partialTheme == null ? void 0 : partialTheme.container) == null ? void 0 : _k.borderColor) || "";
    merged.banner = merge(
      merged.banner,
      {
        backgroundColor: merged.notification.unseen.backgroundColor,
        backgroundOpacity: 0.1,
        textColor: merged.notification.unseen.textColor,
        fontFamily: merged.footer.fontFamily,
        textAlign: merged.footer.textAlign,
        fontSize: merged.footer.fontSize
      },
      partialTheme.banner
    );
    return merged;
  }, [partialTheme]);
  return /* @__PURE__ */ jsxRuntime.jsx(MagicBellThemeContext.Provider, __spreadValues({ value: theme }, props));
}
const useTheme = () => react.useContext(MagicBellThemeContext);
const MagicBellThemeContext$1 = MagicBellThemeContext;
const cleanslate = react$1.css`
  backface-visibility: visible;
  background-clip: border-box;
  background-color: transparent;
  background-origin: padding-box;
  background-position: 0 0;
  background-size: auto;
  border-radius: 0;
  border: 0;
  box-shadow: none;
  box-sizing: content-box;
  clear: none;
  clip: auto;
  color: inherit;
  cursor: auto;
  direction: inherit;
  display: block;
  left: auto;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue',
    sans-serif;
  font-size: 14px;
  font-weight: normal;
  height: auto;
  hyphens: manual;
  letter-spacing: normal;
  line-height: 1;
  margin: 0;
  max-height: none;
  max-width: none;
  min-height: 0;
  min-width: 0;
  opacity: 1;
  outline: invert none medium;
  padding: 0;
  perspective: none;
  position: static;
  right: auto;
  top: auto;
  transform: none;
  text-align: left;
  text-decoration: none;
  vertical-align: baseline;
  visibility: inherit;
  white-space: normal;
  width: auto;
  word-spacing: normal;
  z-index: auto;

  div,
  span,
  p,
  a,
  strong,
  b,
  u,
  i,
  ol,
  ul,
  li,
  form,
  label,
  table,
  tr,
  th,
  td,
  article,
  aside,
  footer,
  header,
  nav,
  section {
    margin: 0;
    padding: 0;
    border: 0;
    font-size: 100%;
    font: inherit;
    vertical-align: baseline;
  }

  a {
    cursor: pointer !important;
    color: inherit !important;
  }

  button {
    background: transparent;
    border: none;
    font-size: inherit !important;
    color: inherit;
    padding: 0;
    cursor: pointer !important;
  }
`;
const cleanslate$1 = cleanslate;
function Badge({ count }) {
  const theme = useTheme();
  const { unseenBadge: badgeTheme } = theme;
  const style = react$1.css`
    align-items: center;
    background: ${toRGBA(badgeTheme.backgroundColor, badgeTheme.backgroundOpacity)} !important;
    border: 1px solid ${badgeTheme.borderColor} !important;
    border-radius: ${badgeTheme.borderRadius} !important;
    color: ${badgeTheme.textColor} !important;
    display: flex;
    font-family: ${badgeTheme.fontFamily} !important;
    font-size: ${badgeTheme.fontSize} !important;
    font-weight: ${badgeTheme.fontWeight} !important;
    padding: ${badgeTheme.padding} !important;
    text-align: ${badgeTheme.textAlign} !important;
    text-transform: ${badgeTheme.textTransform} !important;

    div {
      width: 100%;
    }
  `;
  return /* @__PURE__ */ jsxRuntime$1.jsx("span", { css: [cleanslate$1, style], children: /* @__PURE__ */ jsxRuntime$1.jsx("div", { "aria-label": `${count} unread items`, "aria-live": "polite", role: "status", children: count }) });
}
function BellBadge({ count }) {
  const theme = useTheme();
  const { icon: iconTheme } = theme;
  if (count === 0)
    return null;
  return /* @__PURE__ */ jsxRuntime$1.jsx(
    "div",
    {
      css: react$1.css`
        position: absolute !important;
        transform: translate(-50%, -50%) scale(${Math.max(1, parseInt(iconTheme.width) / 24)});
        top: 10%;
        left: 80%;
      `,
      children: /* @__PURE__ */ jsxRuntime$1.jsx(Badge, { count })
    }
  );
}
function BellIcon$1() {
  const { icon: theme } = useTheme();
  return /* @__PURE__ */ jsxRuntime.jsxs("svg", { width: theme.width, height: theme.width, viewBox: "0 0 27 27", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
    /* @__PURE__ */ jsxRuntime.jsx(
      "path",
      {
        d: "M13.5002 1.35008C14.8661 1.35476 16.1839 1.85467 17.2092 2.75708C18.2345 3.65948 18.8977 4.90313 19.0757 6.25733C19.0757 6.33833 19.0757 6.41933 19.0757 6.50033C19.0789 6.54978 19.0789 6.59938 19.0757 6.64883V6.75008C19.0757 6.83108 19.0757 6.91883 19.0757 6.99983V10.1251C19.159 12.2833 19.8161 14.3803 20.9792 16.2001C21.6542 17.4151 21.9512 17.9618 22.12 18.2251V18.2926H4.84673L4.88048 18.2251C5.04923 17.9483 5.34623 17.4083 6.00773 16.2001C7.15426 14.3755 7.7949 12.2789 7.86398 10.1251V6.98633C7.86398 6.90533 7.86398 6.82433 7.86398 6.73658V6.68258C7.86077 6.63313 7.86077 6.58353 7.86398 6.53408V6.53408C7.87283 6.44344 7.88634 6.35332 7.90448 6.26408C8.07875 4.90403 8.74341 3.65435 9.7737 2.74958C10.804 1.84482 12.1291 1.34718 13.5002 1.35008V1.35008ZM13.5002 8.14381e-05C11.8073 0.00217804 10.1728 0.619518 8.90126 1.73713C7.62966 2.85474 6.80762 4.39643 6.58823 6.07508C6.58823 6.18308 6.58823 6.28433 6.54773 6.39233C6.5413 6.47546 6.5413 6.55896 6.54773 6.64208C6.54117 6.76349 6.54117 6.88517 6.54773 7.00658V10.1251C6.46641 12.0445 5.8771 13.9079 4.83998 15.5251C3.72623 17.5501 3.69923 17.5501 3.69923 17.5501L2.94323 18.9001C2.88069 18.9728 2.84212 19.063 2.83278 19.1585C2.82344 19.2539 2.84379 19.3499 2.89105 19.4333C2.93831 19.5168 3.01018 19.5836 3.09684 19.6247C3.1835 19.6658 3.28072 19.6791 3.37523 19.6628H23.6252C23.7092 19.6655 23.7923 19.6453 23.8658 19.6046C23.9392 19.5638 24.0003 19.5039 24.0425 19.4313C24.0847 19.3586 24.1065 19.2759 24.1055 19.1919C24.1045 19.1079 24.0809 19.0257 24.037 18.9541L23.281 17.6041C23.281 17.6041 23.281 17.6041 22.1402 15.5791C21.113 13.9408 20.5421 12.0579 20.4865 10.1251V6.98633C20.493 6.86492 20.493 6.74324 20.4865 6.62183C20.4929 6.53871 20.4929 6.45521 20.4865 6.37208C20.4865 6.26408 20.4865 6.16283 20.446 6.05483C20.2227 4.3735 19.3942 2.83119 18.1157 1.71669C16.8372 0.602178 15.1963 -0.00811186 13.5002 8.14381e-05V8.14381e-05Z",
        fill: theme.borderColor
      }
    ),
    /* @__PURE__ */ jsxRuntime.jsx(
      "path",
      {
        d: "M18.4544 23.2402C18.2681 23.5004 18.0628 23.7463 17.8401 23.976C17.2722 24.5502 16.5983 25.0087 15.8556 25.326C15.1152 25.6377 14.32 25.7982 13.5167 25.7982C12.7134 25.7982 11.9182 25.6377 11.1779 25.326C10.4352 25.0087 9.76121 24.5502 9.19335 23.976C8.96872 23.748 8.76327 23.502 8.5791 23.2402",
        stroke: theme.borderColor,
        strokeWidth: "1.35",
        strokeMiterlimit: "10",
        strokeLinecap: "round"
      }
    )
  ] });
}
function Bell({ Icon, Badge: Badge2 = BellBadge, onClick, storeId, counter }) {
  const notifications = reactHeadless.useBell({ storeId });
  const theme = useTheme();
  const { isFetchingConfig } = useMagicBellContext();
  const { icon: iconTheme } = theme;
  const handleClick = () => {
    notifications == null ? void 0 : notifications.markAllAsSeen();
    onClick();
  };
  const containerStyle = react$1.css`
    display: block;
    cursor: pointer;
    position: relative !important;
    width: ${iconTheme.width} !important;
  `;
  const iconStyle = react$1.css`
    position: relative !important;

    & > * {
      height: 100%;
      width: 100%;
    }
  `;
  if (isFetchingConfig) {
    return /* @__PURE__ */ jsxRuntime$1.jsx("div", { css: [cleanslate$1, containerStyle] });
  }
  return /* @__PURE__ */ jsxRuntime$1.jsxs(
    "a",
    {
      role: "button",
      onClick: handleClick,
      css: [cleanslate$1, containerStyle],
      "aria-label": "Notifications",
      "data-testid": "bell",
      "data-magicbell-bell": true,
      children: [
        /* @__PURE__ */ jsxRuntime$1.jsx("div", { css: iconStyle, children: !ramda.isNil(Icon) ? Icon : /* @__PURE__ */ jsxRuntime$1.jsx(BellIcon$1, {}) }),
        notifications && /* @__PURE__ */ jsxRuntime$1.jsx(Badge2, { count: counter === "unread" ? notifications == null ? void 0 : notifications.unreadCount : notifications == null ? void 0 : notifications.unseenCount })
      ]
    }
  );
}
function BellIcon() {
  const theme = useTheme();
  const { icon: iconTheme } = theme;
  return /* @__PURE__ */ jsxRuntime.jsxs("svg", { width: "32", height: "32", viewBox: "0 0 32 32", fill: iconTheme.borderColor, children: [
    /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M15.9997 4.70663C14.3971 4.71182 12.8617 5.34576 11.7284 6.47013C10.5951 7.59449 9.95592 9.11801 9.95038 10.7082V15.0907C9.95038 16.4805 9.85234 17.3932 9.62941 18.1738C9.39598 18.9845 9.04584 19.5809 8.55447 20.3349C8.38874 20.5862 8.23117 20.8144 8.08761 21.0217C7.66277 21.6158 8.58949 21.7583 9.06218 21.8324C10.8129 22.115 13.2639 22.2957 16.0102 22.2957C18.7565 22.2957 21.2052 22.1196 22.9582 21.8324C24.1791 21.6344 24.0822 21.3031 23.5897 20.5584C23.0819 19.7929 22.7038 19.1791 22.44 18.3718C22.1762 17.5646 22.0467 16.6496 22.0467 15.3119V10.7082C22.0442 9.11807 21.4069 7.59366 20.2742 6.4688C19.1414 5.34394 17.6057 4.71031 16.0032 4.70663H15.9997ZM16.0032 2C18.3263 2.01068 20.551 2.93195 22.1926 4.56308C23.8342 6.19422 24.7596 8.40302 24.7673 10.7082V15.3166C24.7673 16.3589 24.8502 17.0214 25.0217 17.5414C25.1933 18.0614 25.4711 18.5085 25.8528 19.0829C26.1294 19.501 26.4048 19.8647 26.6289 20.1623C27.1588 20.8642 27.5136 21.3344 27.4996 21.976V22.0061C27.4996 23.2234 25.9263 24.0908 23.3854 24.4985C21.4713 24.8089 18.858 25 16.0009 25C13.1437 25 10.5304 24.8089 8.61516 24.4985C6.07428 24.0874 4.50214 23.2245 4.50214 22.0061V21.9957C4.46829 21.3286 4.83944 20.8306 5.40434 20.0766C5.64944 19.7489 5.95057 19.3447 6.26686 18.8629C6.61701 18.3267 6.86094 17.9201 7.001 17.4325C7.15039 16.9091 7.21575 16.2153 7.21575 15.0884V10.7082C7.22192 8.40035 8.14864 6.18875 9.79334 4.55693C11.438 2.92511 13.6669 2.00581 15.9927 2H16.0032Z" }),
    /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M20.4988 26C20.4489 27.0446 19.9795 28.0338 19.1834 28.7721C18.7655 29.1614 18.2692 29.4702 17.7228 29.6809C17.1765 29.8916 16.5909 30 15.9994 30C15.408 30 14.8223 29.8916 14.276 29.6809C13.7296 29.4702 13.2333 29.1614 12.8154 28.7721C12.0193 28.0338 11.5499 27.0446 11.5 26C12.3651 26.0703 13.3047 26.1198 14.2916 26.1473C14.3561 26.4337 14.5025 26.6985 14.7154 26.9139C14.9283 27.1293 15.1998 27.2872 15.5013 27.371C15.8027 27.4548 16.1228 27.4613 16.4279 27.3898C16.733 27.3184 17.0116 27.1716 17.2345 26.9651C17.4739 26.7413 17.6382 26.4575 17.7072 26.1484C18.6941 26.1209 19.6337 26.0714 20.5 26.0011" })
  ] });
}
const TranslationsContext = react.createContext({});
const TranslationsProvider = TranslationsContext.Provider;
const useTranslations = () => react.useContext(TranslationsContext);
function useTranslate() {
  const translations = useTranslations();
  return react.useCallback(
    (id, defaultMessage) => ramda.pathOr(defaultMessage, id.split("."), translations),
    [translations]
  );
}
function openWindow(url) {
  const top = (screen.height - 400) / 4;
  const left = (screen.width - 600) / 2;
  window.open(url, "", `width=600,height=400,scrollbars=no,top=${top},left=${left}`);
}
function Text({ id, defaultMessage, html = false }) {
  const translations = useTranslations();
  const localizedText = ramda.pathOr(defaultMessage, id.split("."), translations);
  if (html)
    return /* @__PURE__ */ jsxRuntime.jsx("span", { dangerouslySetInnerHTML: { __html: localizedText } });
  return /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: localizedText });
}
function CloseIcon() {
  return /* @__PURE__ */ jsxRuntime.jsx(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "none",
      width: "18px",
      height: "18px",
      viewBox: "0 0 24 24",
      stroke: "currentColor",
      children: /* @__PURE__ */ jsxRuntime.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M6 18L18 6M6 6l12 12" })
    }
  );
}
function CloseBannerButton({ onClick }) {
  const handleClick = () => {
    onClick();
  };
  return /* @__PURE__ */ jsxRuntime$1.jsx(
    "button",
    {
      onClick: handleClick,
      "aria-label": "close notification",
      css: react$1.css`
        display: flex;
        align-items: center;

        svg {
          height: 24px;
        }
      `,
      children: /* @__PURE__ */ jsxRuntime$1.jsx(CloseIcon, {})
    }
  );
}
function EnablePushNotificationsButton({ onClick }) {
  const theme = useTheme();
  const handleClick = () => {
    onClick();
  };
  return /* @__PURE__ */ jsxRuntime$1.jsx(
    "button",
    {
      css: react$1.css`
        padding: 10px !important;
        border-radius: 4px !important;
        background: ${theme.footer.backgroundColor} !important;
        color: ${theme.footer.textColor} !important;
      `,
      onClick: handleClick,
      children: /* @__PURE__ */ jsxRuntime$1.jsx(Text, { id: "web-push-notifications.enable-now", defaultMessage: "Enable Now" })
    }
  );
}
function EnablePushNotificationsBanner() {
  const { channels } = reactHeadless.useConfig();
  const isWebPushEnabled = ramda.pathOr(false, ["webPush", "enabled"], channels);
  const { apiKey, userEmail, userExternalId } = reactHeadless.clientSettings.getState();
  const theme = useTheme();
  const [wasRequested, setRequestedAt] = reactUse.useLocalStorage(
    `magicbell:${apiKey}:web-push-requested-at`,
    null
  );
  const enablePushNotifications = () => {
    const subscribeUrl = ramda.path(["webPush", "config", "subscribeUrl"], channels);
    const { accentColor, backgroundColor, textColor } = theme.dialog;
    const url = new URL(subscribeUrl);
    if (userEmail)
      url.searchParams.set("user_email", userEmail);
    if (userExternalId)
      url.searchParams.set("user_external_id", userExternalId);
    if (accentColor && backgroundColor && textColor) {
      url.searchParams.set("background_color", backgroundColor);
      url.searchParams.set("text_color", textColor);
      url.searchParams.set("accent_color", accentColor);
    }
    setRequestedAt(Date.now());
    openWindow(url.toString());
  };
  const closeBanner = () => {
    setRequestedAt(Date.now());
  };
  if (wasRequested || !isWebPushEnabled)
    return null;
  return /* @__PURE__ */ jsxRuntime$1.jsxs(
    "div",
    {
      css: react$1.css`
        padding: 14px 24px !important;
        display: flex;
        align-items: center;
        background: ${toRGBA(theme.banner.backgroundColor, theme.banner.backgroundOpacity)};
        box-shadow: ${theme.banner.boxShadow ? `${theme.banner.boxShadow} !important` : void 0};
        color: ${theme.banner.textColor} !important;
        font-family: ${theme.banner.fontFamily} !important;
        text-align: ${theme.banner.textAlign} !important;
        font-size: ${theme.banner.fontSize} !important;
        line-height: 1.5 !important;

        & > * {
          margin-left: 1em;
        }
      `,
      children: [
        /* @__PURE__ */ jsxRuntime$1.jsx("p", { style: { flex: 1 }, children: /* @__PURE__ */ jsxRuntime$1.jsx(
          Text,
          {
            id: "web-push-notifications.notice",
            defaultMessage: "By enabling browser notifications, you\u2019ll stay up to date even better."
          }
        ) }),
        /* @__PURE__ */ jsxRuntime$1.jsx(EnablePushNotificationsButton, { onClick: enablePushNotifications }),
        /* @__PURE__ */ jsxRuntime$1.jsx(CloseBannerButton, { onClick: closeBanner })
      ]
    }
  );
}
function MagicBellLogo() {
  return /* @__PURE__ */ jsxRuntime.jsxs(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 516 100",
      role: "img",
      "aria-label": "MagicBell logo",
      fill: "currentColor",
      width: "64",
      height: "16",
      children: [
        /* @__PURE__ */ jsxRuntime.jsx(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M1.77 72.8a1.73 1.73 0 01-1.53-2.61l2.79-5s0 .09 4.22-7.55c3.2-5.42 6.2-12.25 6.2-20.25V26.6c0-11.05 9-26.6 26.61-26.6 9.88 0 17 4.49 21.39 10.52a.68.68 0 01.36.09l9.64 2.69a2.55 2.55 0 011.17 4.23l-5.93 6c.09 1.08.18 2.06.18 3.14v10.7c0 7.46 2.52 13.84 5.3 19l3.78 8.27s0-.09 2.6 5.57a1.76 1.76 0 01-1.61 2.52l-75.17.07zM18.85 62h2.24c4.86 0 36-4.49 36-33.34 0-7.64-5.66-17.08-17.07-17.08s-17.08 10-17.08 17.08v6.92c0 5.12-.09 10.52-2.42 16.72-.9 2.24-2.25 5-3.24 7a1.84 1.84 0 001.57 2.7zm-1 21.58a1.59 1.59 0 00-1.51 2.2v.1a22.83 22.83 0 005.35 7.37 25.108 25.108 0 008.07 5 26.818 26.818 0 0019.06 0 25.27 25.27 0 008.08-5 23 23 0 005.35-7.37v-.1a1.578 1.578 0 00-1.51-2.2h-7.46a2 2 0 00-1.58.86 13.63 13.63 0 01-1.92 2.18 15 15 0 01-4.79 3 15.87 15.87 0 01-11.3 0 15 15 0 01-4.79-3 14.157 14.157 0 01-1.92-2.18 1.93 1.93 0 00-1.53-.86h-7.6z"
          }
        ),
        /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M491.772 9.82h-6.29a1.8 1.8 0 00-1.8 1.8v60.21a1.8 1.8 0 001.8 1.8h6.29a1.8 1.8 0 001.8-1.8V11.62a1.8 1.8 0 00-1.8-1.8zM180.451 73.63h-6.29a1.798 1.798 0 01-1.8-1.79V25.38a.448.448 0 00-.654-.396.45.45 0 00-.206.216l-12.92 29.54a1.787 1.787 0 01-1.65 1.07h-7.48a1.777 1.777 0 01-1.65-1.07L134.621 25a.45.45 0 00-.86.18v46.66a1.799 1.799 0 01-1.8 1.79h-6.29a1.798 1.798 0 01-1.8-1.79V11.62a1.811 1.811 0 011.8-1.8h11.88a1.8 1.8 0 011.65 1.08l13.55 30.83a.447.447 0 00.415.276.449.449 0 00.415-.276l13.27-30.82a1.821 1.821 0 011.66-1.09h11.94a1.8 1.8 0 011.8 1.8v60.22a1.8 1.8 0 01-.528 1.27 1.781 1.781 0 01-1.272.52zm333.2-63.81h-6.29a1.8 1.8 0 00-1.8 1.8v60.21a1.8 1.8 0 001.8 1.8h6.29a1.8 1.8 0 001.8-1.8V11.62a1.8 1.8 0 00-1.8-1.8zm-93.279 40.23a14.48 14.48 0 00-2.78-4.86 15.75 15.75 0 00-4.68-3.59 10.513 10.513 0 00-1.46-.6 20.37 20.37 0 00-2.57-.85c-.934-.15-1.876-.25-2.82-.3a.22.22 0 01-.22-.22.216.216 0 01.133-.213.218.218 0 01.087-.017 11.75 11.75 0 002.22-.57c.42-.16.84-.34 1.25-.53a11.27 11.27 0 001.09-.56 15.782 15.782 0 003.5-2.87 12.28 12.28 0 002.48-3.87c.626-1.574.932-3.257.9-4.95 0-5.31-2-9.27-5.85-12.06-3.85-2.79-9.09-4.13-15.75-4.13h-13.69a1.788 1.788 0 00-1.76 1.76h-.27v60.21a1.81 1.81 0 001.79 1.81h17.29c2.918.034 5.826-.36 8.63-1.17a21.302 21.302 0 007-3.43 14.7 14.7 0 004.69-5.58 16.826 16.826 0 001.7-7.83 16.552 16.552 0 00-.91-5.58zm-30.05-29.61a1.807 1.807 0 011.8-1.8h3.41a13.8 13.8 0 017.92 2.07c2 1.36 3 3.51 3 6.39a8.546 8.546 0 01-2.61 6.57c-1.72 1.63-4.32 2.43-7.74 2.43h-4a1.802 1.802 0 01-1.8-1.79l.02-13.87zm17.18 41.76c-1.88 1.8-4.67 2.7-8.45 2.7h-6.84a1.81 1.81 0 01-1.8-1.8V46.63a1.807 1.807 0 011.8-1.8h5.94c3.95 0 6.93.9 9 2.71a9.076 9.076 0 013.07 7.29 10.015 10.015 0 01-2.72 7.37zm-58.891-34.04a22 22 0 018 1.35 20.286 20.286 0 015.84 3.41 16.373 16.373 0 013.77 4.58 18.482 18.482 0 011.62 3.69.928.928 0 01-.9 1.17h-7.91a1.897 1.897 0 01-1.62-1 9.8 9.8 0 00-4-3.87 12.139 12.139 0 00-13.3 2.16 15.26 15.26 0 00-4.4 11.06 14.872 14.872 0 006.74 12.59 11.998 11.998 0 006.25 1.7c2.78 0 4.94-.63 6.47-2a12.785 12.785 0 002.87-3.51 1.736 1.736 0 011.53-.9h7.88a.892.892 0 01.81 1.26 27.933 27.933 0 01-2.07 4.41 20.468 20.468 0 01-4 4.76 19.534 19.534 0 01-5.84 3.33 23.275 23.275 0 01-7.82 1.25 24.747 24.747 0 01-9-1.61 19.527 19.527 0 01-7.19-4.68 20.684 20.684 0 01-4.76-7.19 24 24 0 01-1.71-9.34c-.029-2.97.507-5.92 1.58-8.69a22.502 22.502 0 014.49-7.19 20.002 20.002 0 017.1-4.86 22.152 22.152 0 019.57-1.88zM311.352 9.98h-1.07a5.02 5.02 0 00-5.02 5.02v.03a5.02 5.02 0 005.02 5.02h1.07a5.02 5.02 0 005.02-5.02V15a5.02 5.02 0 00-5.02-5.02zm2.529 18.34h-6.21a1.8 1.8 0 00-1.8 1.8V72a1.8 1.8 0 001.8 1.8h6.21a1.8 1.8 0 001.8-1.8V30.12a1.8 1.8 0 00-1.8-1.8zm138.419-.16a21 21 0 019.54 2 20.408 20.408 0 016.67 5.13 20.992 20.992 0 013.87 7.12 24.435 24.435 0 011.26 8v1.17a1.811 1.811 0 01-1.8 1.8h-29.18a1.855 1.855 0 00-1.393.669 1.855 1.855 0 00-.407 1.49c.174.898.446 1.773.81 2.61a13.625 13.625 0 002.79 4 13.852 13.852 0 004.05 2.7 11.237 11.237 0 004.87 1 11.88 11.88 0 005.58-1.26 11.46 11.46 0 003.42-2.88 1.883 1.883 0 011.44-.72h7.93a.917.917 0 01.916.896.912.912 0 01-.106.455 34.624 34.624 0 01-2.11 3.37 17.758 17.758 0 01-4.15 4.05 20.816 20.816 0 01-5.67 2.79 22.407 22.407 0 01-7.2 1.08 23.368 23.368 0 01-9.1-1.71 22.352 22.352 0 01-7.2-4.77 22.07 22.07 0 01-4.68-7.29 26.313 26.313 0 01-1.71-9.37 24.373 24.373 0 011.44-8.55 22.56 22.56 0 014.27-7.12A20.252 20.252 0 01443.2 30a21.319 21.319 0 019.1-1.84zm0 7.47a10.74 10.74 0 00-4.6.9 12.005 12.005 0 00-3.51 2.34 10.581 10.581 0 00-2.34 3.34 9.559 9.559 0 00-.63 1.71 1.745 1.745 0 00.278 1.563 1.739 1.739 0 001.432.687h18.64a1.77 1.77 0 001.71-2.25 11.534 11.534 0 00-6.57-7.48 11.661 11.661 0 00-4.41-.81zM228.341 30v4a.438.438 0 01-.287.423.44.44 0 01-.493-.133c-.46-.52-1-1-1.48-1.58a14.818 14.818 0 00-3-2.31 17.44 17.44 0 00-3.88-1.65 17.008 17.008 0 00-4.81-.62 20.608 20.608 0 00-8.18 1.64 20.917 20.917 0 00-6.76 4.62 21.275 21.275 0 00-4.58 7.11 24.481 24.481 0 00-1.69 9.26 25.154 25.154 0 001.82 10 21.997 21.997 0 004.76 7.16 19.298 19.298 0 006.59 4.32 19.886 19.886 0 007.29 1.42 17.14 17.14 0 008.86-2.09 23.029 23.029 0 005.05-4 .45.45 0 01.77.31v4a1.798 1.798 0 001.8 1.79h6.33a1.8 1.8 0 001.8-1.79V30a1.803 1.803 0 00-1.8-1.79h-6.29a1.8 1.8 0 00-1.82 1.79zm0 25.5a10.7 10.7 0 01-.44 1.23 14.142 14.142 0 01-2.8 4.36 12.612 12.612 0 01-4 2.84 14.359 14.359 0 01-5.73 1 12.366 12.366 0 01-4.79-1.18 11.64 11.64 0 01-4-3.21 13.211 13.211 0 01-2.4-4.54 18.2 18.2 0 01-.75-5.2c.002-1.735.276-3.46.81-5.11a13.713 13.713 0 012.4-4.54 11.64 11.64 0 014-3.21 12.939 12.939 0 015.81-1.24 12.002 12.002 0 014.9 1 11.71 11.71 0 014 2.88 13.68 13.68 0 012.67 4.54c.136.357.253.72.35 1.09.43 1.56.642 3.172.63 4.79a14.914 14.914 0 01-.66 4.45v.05zm55.03-25.5v4a.452.452 0 01-.79.29c-.45-.52-.94-1-1.48-1.58a14.54 14.54 0 00-3-2.31 17.35 17.35 0 00-3.87-1.65 17.003 17.003 0 00-4.81-.62 20.618 20.618 0 00-14.9 6.23 21.29 21.29 0 00-4.58 7.11 24.321 24.321 0 00-1.69 9.26c-.08 3.422.54 6.825 1.82 10a21.996 21.996 0 004.76 7.16 19.372 19.372 0 006.58 4.32 19.998 19.998 0 007.3 1.42 17.07 17.07 0 008.85-2.09 22.993 22.993 0 005.06-4 .45.45 0 01.77.31v6.37c.01.19.01.38 0 .57a12.692 12.692 0 01-12.74 12 16.071 16.071 0 01-9.47-2.79 5.679 5.679 0 01-1.83-2.15 1.825 1.825 0 00-1.68-1.19h-7.52a.906.906 0 00-.859.626.893.893 0 00-.041.374c.144 1.849.69 3.644 1.6 5.26.215.396.452.78.71 1.15 3.8 5.5 11.63 8.69 19.05 8.69a22.599 22.599 0 0022.62-21.39V30a1.782 1.782 0 00-1.086-1.696 1.798 1.798 0 00-.694-.144h-6.29a1.794 1.794 0 00-1.668 1.14 1.783 1.783 0 00-.122.7zm-.44 26.73a14.162 14.162 0 01-2.81 4.27 12.523 12.523 0 01-4 2.85c-1.497.67-3.12 1.01-4.76 1a12.908 12.908 0 01-5.74-1.21 11.688 11.688 0 01-4.05-3.21 12.992 12.992 0 01-2.36-4.43 18.2 18.2 0 01-.75-5.2 16.662 16.662 0 01.8-5.11 13.732 13.732 0 012.4-4.54 11.69 11.69 0 014.05-3.21 12.911 12.911 0 015.74-1.24 12.063 12.063 0 014.9 1 11.701 11.701 0 014 2.88 13.663 13.663 0 012.67 4.54c.13.36.25.72.35 1.09a17.43 17.43 0 01.63 4.66V51a14.9 14.9 0 01-.63 4.42c-.125.427-.272.848-.44 1.26v.05z" })
      ]
    }
  );
}
function FooterLogo() {
  const inboxConfig = reactHeadless.useConfig((state) => state.inbox);
  const hideBranding = ramda.pathOr(false, ["features", "noMagicbellBranding", "enabled"], inboxConfig);
  const style = react$1.css`
    height: 20px;
    display: inline-flex;
    align-items: center;
  `;
  if (hideBranding)
    return /* @__PURE__ */ jsxRuntime$1.jsx("div", { css: style });
  return /* @__PURE__ */ jsxRuntime$1.jsx("div", { css: style, children: /* @__PURE__ */ jsxRuntime$1.jsx("a", { href: "https://magicbell.io/?utm_source=widget", target: "_blank", rel: "noopener noreferrer", children: /* @__PURE__ */ jsxRuntime$1.jsx(MagicBellLogo, {}) }) });
}
function StyledFooter({ children }) {
  const theme = useTheme();
  const { footer: footerTheme } = theme;
  const style = react$1.css`
    background: ${toRGBA(footerTheme.backgroundColor, footerTheme.backgroundOpacity)};
    color: ${toRGBA(footerTheme.textColor, 0.75)} !important;
    font-family: ${footerTheme.fontFamily} !important;
    font-size: ${footerTheme.fontSize} !important;
    font-weight: ${footerTheme.fontWeight} !important;
    text-align: ${footerTheme.textAlign} !important;
    padding: ${footerTheme.padding} !important;
    border-top: ${footerTheme.borderColor ? `1px solid ${footerTheme.borderColor} !important` : void 0};
    flex-shrink: 0 !important;

    &:first-of-type {
      border-radius: ${footerTheme.borderRadius} ${footerTheme.borderRadius} 0 0 !important;
    }

    &:last-of-type {
      border-radius: 0 0 ${footerTheme.borderRadius} ${footerTheme.borderRadius}!important;
    }

    span {
      color: ${footerTheme.textColor} !important;

      a {
        color: ${footerTheme.textColor};
        margin-right: 16px !important;
        opacity: 0.75;
        display: block;
      }
    }
  `;
  return /* @__PURE__ */ jsxRuntime$1.jsx("div", { css: [cleanslate$1, style], children });
}
function Footer({ children }) {
  const theme = useTheme();
  const { footer: footerTheme } = theme;
  const contentStyle = react$1.css`
    display: flex;
    align-items: center;
    justify-content: space-between;
    color: ${footerTheme.textColor} !important;

    a,
    button {
      color: ${footerTheme.textColor};
      display: block;
    }

    a {
      opacity: 0.85;
    }
  `;
  return /* @__PURE__ */ jsxRuntime$1.jsx(StyledFooter, { children: /* @__PURE__ */ jsxRuntime$1.jsxs("div", { css: contentStyle, children: [
    /* @__PURE__ */ jsxRuntime$1.jsx(FooterLogo, {}),
    children
  ] }) });
}
function SettingsIcon() {
  return /* @__PURE__ */ jsxRuntime.jsx("svg", { width: "20", height: "20", viewBox: "0 0 20 20", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ jsxRuntime.jsx(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M11.4897 3.17C11.1097 1.61 8.88975 1.61 8.50975 3.17C8.45302 3.40442 8.34174 3.62213 8.18497 3.80541C8.02821 3.9887 7.83038 4.13238 7.60759 4.22477C7.38481 4.31716 7.14336 4.35564 6.90289 4.33709C6.66242 4.31854 6.42973 4.24347 6.22375 4.118C4.85175 3.282 3.28175 4.852 4.11775 6.224C4.65775 7.11 4.17875 8.266 3.17075 8.511C1.60975 8.89 1.60975 11.111 3.17075 11.489C3.40523 11.5458 3.62298 11.6572 3.80626 11.8141C3.98955 11.971 4.13319 12.1689 4.22549 12.3918C4.31779 12.6147 4.35614 12.8563 4.33742 13.0968C4.3187 13.3373 4.24343 13.5701 4.11775 13.776C3.28175 15.148 4.85175 16.718 6.22375 15.882C6.42969 15.7563 6.6624 15.6811 6.90293 15.6623C7.14347 15.6436 7.38502 15.682 7.60793 15.7743C7.83084 15.8666 8.02879 16.0102 8.18568 16.1935C8.34256 16.3768 8.45394 16.5945 8.51075 16.829C8.88975 18.39 11.1108 18.39 11.4888 16.829C11.5457 16.5946 11.6572 16.377 11.8142 16.1939C11.9711 16.0107 12.169 15.8672 12.3918 15.7749C12.6147 15.6826 12.8561 15.6442 13.0966 15.6628C13.3371 15.6815 13.5698 15.7565 13.7758 15.882C15.1477 16.718 16.7178 15.148 15.8818 13.776C15.7563 13.57 15.6812 13.3373 15.6626 13.0969C15.644 12.8564 15.6824 12.6149 15.7747 12.3921C15.8669 12.1692 16.0105 11.9713 16.1936 11.8144C16.3768 11.6575 16.5944 11.546 16.8288 11.489C18.3898 11.11 18.3898 8.889 16.8288 8.511C16.5943 8.45419 16.3765 8.34281 16.1932 8.18593C16.01 8.02904 15.8663 7.83109 15.774 7.60818C15.6817 7.38527 15.6434 7.14372 15.6621 6.90318C15.6808 6.66265 15.7561 6.42994 15.8818 6.224C16.7178 4.852 15.1477 3.282 13.7758 4.118C13.5698 4.24368 13.3371 4.31895 13.0966 4.33767C12.856 4.35639 12.6145 4.31804 12.3916 4.22574C12.1687 4.13344 11.9707 3.9898 11.8138 3.80651C11.6569 3.62323 11.5456 3.40548 11.4888 3.171L11.4897 3.17ZM9.99975 13C10.7954 13 11.5585 12.6839 12.1211 12.1213C12.6837 11.5587 12.9998 10.7956 12.9998 10C12.9998 9.20435 12.6837 8.44129 12.1211 7.87868C11.5585 7.31607 10.7954 7 9.99975 7C9.2041 7 8.44104 7.31607 7.87843 7.87868C7.31582 8.44129 6.99975 9.20435 6.99975 10C6.99975 10.7956 7.31582 11.5587 7.87843 12.1213C8.44104 12.6839 9.2041 13 9.99975 13Z",
      fill: "currentColor"
    }
  ) });
}
function StyledHeader({ children }) {
  const theme = useTheme();
  const { header: headerTheme } = theme;
  const style = react$1.css`
    align-items: center;
    background: ${toRGBA(headerTheme.backgroundColor, headerTheme.backgroundOpacity)} !important;
    color: ${headerTheme.textColor};
    display: flex;
    font-family: ${headerTheme.fontFamily} !important;
    font-size: ${headerTheme.fontSize} !important;
    justify-content: space-between;
    text-align: ${headerTheme.textAlign} !important;
    text-transform: ${headerTheme.textTransform} !important;
    padding: ${headerTheme.padding} !important;
    flex-shrink: 0 !important;
    border-bottom: ${headerTheme.borderColor ? `1px solid ${headerTheme.borderColor} !important` : void 0};
    font-weight: ${headerTheme.fontWeight};
    height: ${headerTheme.fontSize} !important;

    &:first-of-type {
      border-radius: ${headerTheme.borderRadius} ${headerTheme.borderRadius} 0 0 !important;
    }

    &:last-of-type {
      border-radius: 0 0 ${headerTheme.borderRadius} ${headerTheme.borderRadius}!important;
    }

    & button:hover {
      opacity: 0.8;
    }

    & button:active {
      opacity: 0.9;
    }

    & button:focus {
      outline: none;
    }

    & button:focus-visible {
      outline: 2px ${headerTheme.textColor} auto !important;
    }
  `;
  return /* @__PURE__ */ jsxRuntime$1.jsx("div", { css: [cleanslate$1, style], children });
}
function Header({ title, actions }) {
  return /* @__PURE__ */ jsxRuntime$1.jsxs(StyledHeader, { children: [
    /* @__PURE__ */ jsxRuntime$1.jsx(
      "div",
      {
        role: "heading",
        css: react$1.css`
          margin-right: 16px !important;
        `,
        children: title
      }
    ),
    /* @__PURE__ */ jsxRuntime$1.jsx(
      "div",
      {
        css: react$1.css`
          height: 14px;
          overflow: visible;
          display: flex;
          align-items: center;
          & > * + * {
            margin-left: 8px;
          }
        `,
        children: actions
      }
    )
  ] });
}
function isTab(child) {
  return child != null && typeof child === "object" && child["type"] === Tab;
}
function Tabs({
  children,
  active,
  onChange
}) {
  const { tabs: tabs2 } = useTheme();
  const style = react$1.css`
    margin: ${tabs2.margin} !important;

    & > * + * {
      margin-left: ${tabs2.spacing} !important;
    }
  `;
  return /* @__PURE__ */ jsxRuntime$1.jsx("div", { css: style, role: "tablist", children: react.Children.toArray(children).filter(isTab).map((child, idx) => __spreadProps(__spreadValues({}, child), {
    props: __spreadProps(__spreadValues({}, child.props), {
      "data-selected": active ? child.props.value === active : idx === 0,
      onClick: () => onChange(child.props.value)
    })
  })) });
}
function Tab(_c) {
  var _d = _c, { children, value } = _d, props = __objRest(_d, ["children", "value"]);
  const { tabs: tabs2 } = useTheme();
  const style = react$1.css`
    &[aria-selected] {
      padding: 10px 8px 12px !important;
      font-weight: ${tabs2.fontWeight} !important;
      line-height: 1.5 !important;
      font-size: ${tabs2.fontSize} !important;
      color: ${tabs2.color} !important;

      &[aria-selected='true'] {
        color: ${tabs2.activeColor} !important;
        box-shadow: inset 0px -2px 0px ${tabs2.activeColor};
      }
    }
  `;
  return /* @__PURE__ */ jsxRuntime$1.jsx("button", __spreadProps(__spreadValues({}, props), { css: style, role: "tab", "aria-selected": Boolean(props["data-selected"]), children: typeof children === "string" ? /* @__PURE__ */ jsxRuntime$1.jsx(Text, { id: `tab.${value}`, defaultMessage: children }) : children }));
}
Tabs.Tab = Tab;
function HeaderTabs({ tabsConfig, activeTab, onChange }) {
  return /* @__PURE__ */ jsxRuntime.jsx(Tabs, { active: activeTab, onChange, children: tabsConfig == null ? void 0 : tabsConfig.map(({ storeId, label }) => /* @__PURE__ */ jsxRuntime.jsx(Tabs.Tab, { value: storeId, children: label }, storeId)) });
}
function Popover(_e) {
  var _f = _e, {
    closeOnClick = false,
    children,
    isOpen,
    launcher,
    launcherRef,
    offset = { skidding: 0, distance: 10 },
    onClickOutside,
    placement = "bottom-end",
    popperOptions,
    zIndex = 9999,
    trigger = "mouseenter focus"
  } = _f, props = __objRest(_f, [
    "closeOnClick",
    "children",
    "isOpen",
    "launcher",
    "launcherRef",
    "offset",
    "onClickOutside",
    "placement",
    "popperOptions",
    "zIndex",
    "trigger"
  ]);
  const controlledMode = isOpen !== void 0;
  const triggerProps = controlledMode ? { visible: isOpen } : { trigger };
  const handleClickOutside = () => {
    onClickOutside == null ? void 0 : onClickOutside();
  };
  return /* @__PURE__ */ jsxRuntime.jsx(
    Tippy__default.default,
    __spreadProps(__spreadValues(__spreadProps(__spreadValues({}, props), {
      render: children,
      offset: [offset.skidding, offset.distance],
      onClickOutside: handleClickOutside,
      placement,
      popperOptions,
      reference: launcherRef,
      interactive: !closeOnClick,
      zIndex
    }), triggerProps), {
      children: launcher
    })
  );
}
function Tooltip(_g) {
  var _h = _g, { children, tooltip, placement = "auto" } = _h, props = __objRest(_h, ["children", "tooltip", "placement"]);
  const theme = useTheme();
  if (!tooltip)
    return children;
  const { container: containerTheme, notification: notificationTheme } = theme;
  const tipStyle = react$1.css`
    background: ${containerTheme.backgroundColor} !important;
    border-radius: 4px !important;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    color: ${notificationTheme.default.textColor} !important;
    font-size: 0.8em !important;
    padding: 0.5em !important;
    text-transform: ${notificationTheme.default.textTransform};
    white-space: nowrap !important;
  `;
  return /* @__PURE__ */ jsxRuntime$1.jsx(Popover, __spreadProps(__spreadValues({ launcher: children, placement }, props), { children: () => /* @__PURE__ */ jsxRuntime$1.jsx("span", { css: tipStyle, children: tooltip }) }));
}
const IconButton = react.forwardRef(function IconButton2(_i, ref) {
  var _j = _i, { children, tooltip, tooltipPlacement = "bottom-end" } = _j, props = __objRest(_j, ["children", "tooltip", "tooltipPlacement"]);
  return /* @__PURE__ */ jsxRuntime.jsx(Tooltip, { tooltip: tooltip || props["aria-label"], placement: tooltipPlacement, delay: 500, children: /* @__PURE__ */ jsxRuntime.jsx("button", __spreadProps(__spreadValues({ ref }, props), { children })) });
});
const IconButton$1 = IconButton;
function CheckMarkIcon() {
  return /* @__PURE__ */ jsxRuntime.jsx("svg", { width: "20", height: "20", viewBox: "0 0 20 20", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ jsxRuntime.jsx(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M10 18C12.1217 18 14.1566 17.1571 15.6569 15.6569C17.1571 14.1566 18 12.1217 18 10C18 7.87827 17.1571 5.84344 15.6569 4.34315C14.1566 2.84285 12.1217 2 10 2C7.87827 2 5.84344 2.84285 4.34315 4.34315C2.84285 5.84344 2 7.87827 2 10C2 12.1217 2.84285 14.1566 4.34315 15.6569C5.84344 17.1571 7.87827 18 10 18V18ZM13.707 8.707C13.8892 8.5184 13.99 8.2658 13.9877 8.0036C13.9854 7.7414 13.8802 7.49059 13.6948 7.30518C13.5094 7.11977 13.2586 7.0146 12.9964 7.01233C12.7342 7.01005 12.4816 7.11084 12.293 7.293L9 10.586L7.707 9.293C7.5184 9.11084 7.2658 9.01005 7.0036 9.01233C6.7414 9.0146 6.49059 9.11977 6.30518 9.30518C6.11977 9.49059 6.0146 9.7414 6.01233 10.0036C6.01005 10.2658 6.11084 10.5184 6.293 10.707L8.293 12.707C8.48053 12.8945 8.73484 12.9998 9 12.9998C9.26516 12.9998 9.51947 12.8945 9.707 12.707L13.707 8.707V8.707Z",
      fill: "currentColor"
    }
  ) });
}
function ClearInboxMessage() {
  const theme = useTheme();
  const { images } = useMagicBellContext();
  const { notification: notificationTheme } = theme;
  return /* @__PURE__ */ jsxRuntime$1.jsxs(
    "div",
    {
      css: react$1.css`
        padding: 3em !important;
        text-align: center;
        color: ${notificationTheme.default.textColor};

        img {
          margin: 2em auto;
          height: 200px;
        }
      `,
      children: [
        /* @__PURE__ */ jsxRuntime$1.jsx("p", { children: /* @__PURE__ */ jsxRuntime$1.jsx(Text, { id: "messages.empty-inbox", defaultMessage: "All clear!<br>We'll let you know when there's more.", html: true }) }),
        /* @__PURE__ */ jsxRuntime$1.jsx("img", { src: (images == null ? void 0 : images.emptyInboxUrl) || "https://assets.magicbell.io/images/empty_inbox.png", alt: "No notifications" })
      ]
    }
  );
}
function Layout({ order, children }) {
  return /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: order.map((key) => children.find((child) => (child == null ? void 0 : child.key) === key)) });
}
function useProse() {
  const { prose: prose2 } = useTheme();
  return react$1.css`
    && {
      line-height: 1.5;
    }

    && p {
      margin: 1.25em 0;
    }

    && a {
      color: ${prose2.links} !important;
      user-select: none;

      text-decoration: underline;
      &:hover {
        text-decoration: none;
      }
    }

    && button,
    && a.button {
      display: inline-block;
      color: ${prose2.buttons};
      font-size: 0.875em !important;
      font-family: inherit;
      border: 1px solid ${prose2.buttonBorders};
      border-radius: 0.375rem;
      padding: 0.5em 0.85em;
      line-height: inherit;
      background-color: transparent;
      background-image: none;
      text-decoration: none;
      user-select: none;

      &:hover,
      &:focus {
        opacity: 0.75;
      }

      &:active {
        opacity: 0.5;
      }
    }

    && button + button {
      margin-left: 0.5em;
    }

    && strong,
    && b {
      color: ${prose2.bold} !important;
      font-weight: 600 !important;
    }

    && ol,
    && ul {
      margin: 1.25em 0;
    }

    && ol {
      list-style: decimal;
    }

    && ul {
      list-style: disc;
    }

    && li {
      margin: 0.5em 0 0 2em;
    }

    && hr {
      border: none;
      border-top: 1px solid ${prose2.hr};
      margin: 3em 0;
      height: 0;
      color: inherit;
    }

    && blockquote {
      font-weight: 500;
      font-style: italic;
      color: ${prose2.quotes};
      border-left: 0.25rem solid ${prose2.quoteBorders};
      quotes: '“' '”';
      margin: 1.6em 0;
      padding-left: 1em;
    }

    && blockquote p:first-of-type::before {
      content: open-quote;
    }

    && blockquote p:last-of-type::after {
      content: close-quote;
    }

    && h1 {
      color: ${prose2.headings};
      font-weight: 800;
      font-size: 2.25em;
      margin: 0 0 0.9em 0;
      line-height: 1.1111111;
    }

    && h2 {
      color: ${prose2.headings};
      font-weight: 700;
      font-size: 1.5em;
      margin: 2em 0 1em 0;
      line-height: 1.3333333;
    }

    && h3 {
      color: ${prose2.headings};
      font-weight: 600;
      font-size: 1.25em;
      margin: 1.6em 0 0.6em 0;
      line-height: 1.6;
    }

    && h4,
    && h5,
    && h6 {
      color: ${prose2.headings};
      font-weight: 600;
      font-size: 1.1em;
      margin: 1.5em 0 0.5em 0;
      line-height: 1.5;
    }

    && figure figcaption {
      color: ${prose2.captions};
      font-size: 0.875em;
      line-height: 1.4285714;
      margin: 0.85em 0 0 0;
    }

    && code {
      color: ${prose2.code};
      font-weight: 600;
      font-size: 0.875em;
      font-family: ${prose2.fontMono};
    }

    && code::before {
      content: '\`';
    }

    && code::after {
      content: '\`';
    }

    && pre {
      color: ${prose2.preCode};
      background-color: ${prose2.preBg};
      overflow-x: auto;
      font-size: 0.875em;
      font-family: ${prose2.fontMono};
      line-height: 1.7142857;
      margin: 1.7em 0;
      border-radius: 0.375rem;
      padding: 0.85em 1.14em;
    }

    && pre code {
      background-color: transparent;
      border-width: 0;
      border-radius: 0;
      padding: 0;
      font-weight: 400;
      color: inherit;
      font-size: inherit;
      font-family: inherit;
      line-height: inherit;
    }

    && pre code::before {
      content: '';
    }

    && pre code::after {
      content: '';
    }

    && table {
      width: 100%;
      table-layout: auto;
      text-align: left;
      margin: 2em 0;
      font-size: 0.875em;
      line-height: 1.7142857;
      border-collapse: collapse;
    }

    && thead th {
      font-weight: 600;
      border-bottom: 1px solid ${prose2.thBorders};
      vertical-align: bottom;
      padding: 0 0.5em 0.5em 0.5em;
    }

    && tbody td {
      vertical-align: top;
      padding: 0.5em;
    }

    && tbody tr:not(:last-child) td {
      border-bottom: 1px solid ${prose2.tdBorders};
    }

    && img,
    && video,
    && figure {
      margin: 2em 0;
    }

    && figure > * {
      margin: 0;
    }

    && h2 code {
      font-size: 0.875em;
    }

    && h3 code {
      font-size: 0.9em;
    }

    && > ul > li p {
      margin: 0.75em 0;
    }

    /* first-child, but in a way that emotion doesn't cry */
    && > ul > li > :not(* + *),
    && > ol > li > :not(* + *) {
      margin-top: 1.25em;
    }

    && > ul > li > :last-child,
    && > ol > li > :last-child {
      margin-bottom: 1.25em;
    }

    && ul ul,
    && ul ol,
    && ol ul,
    && ol ol {
      margin: 0.75em 0;
    }

    && hr + *,
    && h2 + *,
    && h3 + *,
    && h4 + *,
    && h5 + *,
    && h6 + * {
      margin-top: 0;
    }

    && thead tr th:first-of-type,
    && tbody tr td:first-of-type {
      padding-left: 0;
    }

    && thead tr th:last-of-type,
    && tbody tr td:last-of-type {
      padding-right: 0;
    }

    && > :not(* + *) {
      margin-top: 0;
    }

    && > :last-child {
      margin-bottom: 0;
    }
  `;
}
function NotificationContent({ notification, prose: withProse = true }) {
  const { sanitizedContent: markup } = notification;
  const ref = react.useRef(null);
  const prose2 = useProse();
  react.useEffect(() => {
    if (!ref.current)
      return;
    const nodes = ref.current.querySelectorAll("time[datetime]");
    if (nodes.length > 0)
      timeago_js.render(nodes);
    return () => {
      timeago_js.cancel();
    };
  }, [markup]);
  if (!markup || markup.replace(/(\n|\s|\r)/gi, "") === "")
    return null;
  const style = react$1.css`
    color: inherit !important;
    cursor: inherit;
    margin: 0;
    line-height: ${withProse ? "inherit" : "1.5 !important"};
    margin-top: 8px !important;
    word-break: break-word !important;
  `;
  return /* @__PURE__ */ jsxRuntime$1.jsx("article", { ref, css: withProse ? [style, prose2] : style, dangerouslySetInnerHTML: { __html: markup } });
}
function MenuIcon() {
  return /* @__PURE__ */ jsxRuntime.jsxs("svg", { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
    /* @__PURE__ */ jsxRuntime.jsx("circle", { cx: "18", cy: "12", r: "1.5", fill: "currentColor" }),
    /* @__PURE__ */ jsxRuntime.jsx("circle", { cx: "12", cy: "12", r: "1.5", fill: "currentColor" }),
    /* @__PURE__ */ jsxRuntime.jsx("circle", { cx: "6", cy: "12", r: "1.5", fill: "currentColor" })
  ] });
}
function NotificationContextMenu({ notification }) {
  const { isRead, markAsUnread, markAsRead } = notification;
  const theme = useTheme();
  const {
    container: containerTheme,
    notification: { default: notificationTheme }
  } = theme;
  const handleDelete = () => notification.delete();
  const toggleRead = () => isRead ? markAsUnread() : markAsRead();
  return /* @__PURE__ */ jsxRuntime$1.jsxs(
    "div",
    {
      onClick: (e) => e.preventDefault(),
      css: react$1.css`
        background: ${containerTheme.backgroundColor} !important;
        border-radius: 4px !important;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        padding: 4px 0 !important;
        color: ${notificationTheme.textColor} !important;
        font-family: ${notificationTheme.fontFamily} !important;
        font-size: ${notificationTheme.fontSize} !important;
        text-transform: ${notificationTheme.textTransform} !important;
        min-width: 10em;

        button {
          display: block;
          padding: 0.75em 1.25em !important;
          width: 100%;
          text-align: left;
          background-color: ${toRGBA(
        notificationTheme.backgroundColor,
        notificationTheme.backgroundOpacity
      )} !important;

          &:hover {
            background-color: ${toRGBA(
        notificationTheme.hover.backgroundColor,
        notificationTheme.hover.backgroundOpacity
      )} !important;
          }

          &:focus {
            outline: none;
          }

          &:focus-visible {
            outline: 2px ${notificationTheme.textColor} solid !important;
          }
        }
      `,
      children: [
        /* @__PURE__ */ jsxRuntime$1.jsx("button", { type: "button", onClick: toggleRead, children: notification.isRead ? /* @__PURE__ */ jsxRuntime$1.jsx(Text, { id: "notification.mark-as-unread", defaultMessage: "Mark as unread" }) : /* @__PURE__ */ jsxRuntime$1.jsx(Text, { id: "notification.mark-as-read", defaultMessage: "Mark as read" }) }),
        /* @__PURE__ */ jsxRuntime$1.jsx("button", { type: "button", onClick: handleDelete, children: /* @__PURE__ */ jsxRuntime$1.jsx(Text, { id: "notification.delete", defaultMessage: "Delete" }) })
      ]
    }
  );
}
function NotificationMenu({ notification, menuPlacement = "bottom-end" }) {
  const { notification: themeVariants } = useTheme();
  const t = useTranslate();
  const theme = !notification.isSeen ? themeVariants.unseen : !notification.isRead ? themeVariants.unread : themeVariants.default;
  const launcher = /* @__PURE__ */ jsxRuntime$1.jsx(
    "button",
    {
      type: "button",
      "aria-label": t("notification.menu", "Menu"),
      css: react$1.css`
        color: ${theme.textColor} !important;

        &:focus {
          outline: none;
        }

        &:focus-visible {
          outline: 2px ${theme.textColor} auto !important;
        }
      `,
      onClick: (e) => e.preventDefault(),
      children: /* @__PURE__ */ jsxRuntime$1.jsx(MenuIcon, {})
    }
  );
  return /* @__PURE__ */ jsxRuntime$1.jsx(
    Popover,
    {
      launcher,
      offset: { skidding: -4, distance: 2 },
      placement: menuPlacement,
      zIndex: 1,
      trigger: "click",
      children: () => /* @__PURE__ */ jsxRuntime$1.jsx(NotificationContextMenu, { notification })
    }
  );
}
function DotIcon() {
  return /* @__PURE__ */ jsxRuntime.jsx("svg", { width: "6", height: "6", viewBox: "0 0 6 6", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ jsxRuntime.jsx("circle", { cx: "3", cy: "3", r: "3", fill: "currentColor" }) });
}
function NotificationState({ notification }) {
  const { notification: themeVariants } = useTheme();
  const theme = !notification.isSeen ? themeVariants.unseen : !notification.isRead ? themeVariants.unread : themeVariants.default;
  return /* @__PURE__ */ jsxRuntime$1.jsx(
    "div",
    {
      css: react$1.css`
        flex: none !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        width: 24px !important;
        height: 24px !important;
        color: ${theme.state.color} !important;
      `,
      children: /* @__PURE__ */ jsxRuntime$1.jsx(DotIcon, {})
    }
  );
}
dayjs__default.default.extend(localizedFormat__default.default);
dayjs__default.default.extend(relativeTime__default.default);
dayjs__default.default.extend(updateLocale__default.default);
dayjs__default.default.updateLocale("en", {
  relativeTime: {
    future: "in %s",
    past: "%s ago",
    s: "%ds",
    m: "1m",
    mm: "%dm",
    h: "1h",
    hh: "%dh",
    d: "1d",
    dd: "%dd",
    M: "1mo",
    MM: "%dmo",
    y: "1y",
    yy: "%dy"
  }
});
function toDate(date) {
  return dayjs__default.default(date);
}
function Timestamp({ date, tooltipPlacement = "bottom-end", delay = 250 }) {
  const [dateObj] = react.useState(() => toDate(date));
  const [relativeTime2, setRelativeTime] = react.useState(dateObj.fromNow(true));
  useInterval__default.default(() => setRelativeTime(dateObj.fromNow(true)), 6e4);
  return /* @__PURE__ */ jsxRuntime.jsx(Tooltip, { tooltip: dateObj.format("LL LT"), placement: tooltipPlacement, delay, children: /* @__PURE__ */ jsxRuntime.jsx("div", { children: relativeTime2 }) });
}
function openActionUrl(notification) {
  if (notification.actionUrl)
    window.open(notification.actionUrl, "_self");
}
function NotificationTitle({ notification }) {
  const { title } = notification;
  const {
    notification: {
      default: { title: theme }
    }
  } = useTheme();
  return /* @__PURE__ */ jsxRuntime$1.jsx(
    "p",
    {
      id: `magicbell-notification-title-${notification.id}`,
      css: react$1.css`
        cursor: inherit;
        font-weight: ${theme.fontWeight} !important;
        font-family: ${theme.fontFamily} !important;
        font-size: ${theme.fontSize} !important;
        color: inherit !important;
        line-height: 1.2 !important;
        word-break: break-word !important;
      `,
      children: title
    }
  );
}
function StyledContainer$1(_k) {
  var _l = _k, { notification, children } = _l, props = __objRest(_l, ["notification", "children"]);
  const { notification: themeVariants } = useTheme();
  const theme = !notification.isSeen ? themeVariants.unseen : !notification.isRead ? themeVariants.unread : themeVariants.default;
  const style = react$1.css`
    background-color: ${toRGBA(theme.backgroundColor, theme.backgroundOpacity)} !important;
    border-radius: ${theme.borderRadius} !important;
    color: ${theme.textColor} !important;
    cursor: pointer;
    display: flex;
    align-items: center;
    font-family: ${theme.fontFamily} !important;
    font-size: ${theme.fontSize} !important;
    margin: ${theme.margin} !important;
    padding: ${theme.padding} !important;
    text-align: ${theme.textAlign} !important;
    text-transform: ${theme.textTransform};
    transition: background-color 300ms ease-out;
    min-height: 32px;
    position: relative !important;

    &:hover {
      background-color: ${toRGBA(theme.hover.backgroundColor, theme.hover.backgroundOpacity)} !important;
    }

    & > * {
      position: relative;
    }
  `;
  return /* @__PURE__ */ jsxRuntime$1.jsx("div", __spreadProps(__spreadValues({ css: [cleanslate$1, style] }, props), { children }));
}
function ClickableNotification({ notification: rawNotification, onClick, prose: prose2 }) {
  const {
    notification: { default: theme }
  } = useTheme();
  const notification = reactHeadless.useNotification(rawNotification);
  const handleClick = (event) => {
    if (event.isDefaultPrevented())
      return;
    const markAsReadPromise = notification.markAsRead();
    const isActionableElement = /^(a|button|input)$/i.test(event.target.tagName);
    if (isActionableElement)
      return;
    const onClickResult = onClick == null ? void 0 : onClick(notification);
    if (onClickResult === false)
      return;
    if (notification.actionUrl) {
      const timeout = new Promise((resolve) => setTimeout(resolve, 1e3));
      Promise.race([markAsReadPromise, timeout]).then(() => openActionUrl(notification));
    }
  };
  const content = react$1.css`
    margin: 0 8px !important;
    width: 100%;
  `;
  const actions = react$1.css`
    display: flex;
    padding: 0 5px !important;
    flex-direction: column;
    align-items: flex-end;
    margin-left: auto !important;
    font-size: ${theme.fontSize} !important;
  `;
  return /* @__PURE__ */ jsxRuntime$1.jsxs(
    StyledContainer$1,
    {
      role: "button",
      "aria-labelledby": `magicbell-notification-title-${notification.id}`,
      notification,
      onClick: handleClick,
      children: [
        /* @__PURE__ */ jsxRuntime$1.jsx(NotificationState, { notification }),
        /* @__PURE__ */ jsxRuntime$1.jsxs("div", { css: content, children: [
          /* @__PURE__ */ jsxRuntime$1.jsx(NotificationTitle, { notification }),
          /* @__PURE__ */ jsxRuntime$1.jsx(NotificationContent, { notification, prose: prose2 })
        ] }),
        /* @__PURE__ */ jsxRuntime$1.jsxs("div", { css: actions, children: [
          notification.sentAt ? /* @__PURE__ */ jsxRuntime$1.jsx(Timestamp, { date: notification.sentAt, tooltipPlacement: "left" }) : /* @__PURE__ */ jsxRuntime$1.jsx("div", {}),
          /* @__PURE__ */ jsxRuntime$1.jsx(NotificationMenu, { notification })
        ] })
      ]
    }
  );
}
function Loader() {
  return /* @__PURE__ */ jsxRuntime$1.jsx(
    "div",
    {
      css: react$1.css`
        color: inherit !important;
        font-size: 0.85em !important;
        padding: 0.5em !important;
        text-align: center !important;
      `,
      children: "Loading..."
    }
  );
}
function NotificationList({
  notifications: store,
  onItemClick,
  height,
  queryParams,
  scrollableTarget,
  ListItem = ClickableNotification
}) {
  const style = react$1.css`
    height: 100%;

    & .infinite-scroll-component__outerdiv {
      height: 100%;
    }

    & .infinite-scroll-component {
      min-height: 100%;
    }
  `;
  return /* @__PURE__ */ jsxRuntime$1.jsx("div", { css: style, children: /* @__PURE__ */ jsxRuntime$1.jsx(
    InfiniteScroll__default.default,
    {
      dataLength: store.notifications.length,
      hasMore: store.hasNextPage,
      next: () => store.fetchNextPage(queryParams),
      loader: /* @__PURE__ */ jsxRuntime$1.jsx(Loader, {}),
      height,
      scrollableTarget,
      children: store.notifications.map((notification) => /* @__PURE__ */ jsxRuntime$1.jsx(ListItem, { notification, onClick: onItemClick }, notification.id))
    }
  ) });
}
function NotificationInboxContent({
  onNotificationClick,
  store,
  height,
  NotificationItem
}) {
  const [contentRef, setContentRef] = react.useState(null);
  return /* @__PURE__ */ jsxRuntime$1.jsx("div", { ref: setContentRef, css: { width: "100%", height: height != null ? height : "100%", overflow: "auto" }, children: contentRef ? /* @__PURE__ */ jsxRuntime$1.jsx(
    NotificationList,
    {
      scrollableTarget: contentRef,
      notifications: store,
      onItemClick: onNotificationClick,
      queryParams: store.context,
      ListItem: NotificationItem
    }
  ) : null });
}
function NotificationsView({
  layout,
  storeId,
  onNotificationClick,
  onAllRead,
  notificationPreferencesEnabled,
  NotificationItem,
  EmptyInboxPlaceholder = ClearInboxMessage,
  setView,
  tabs: tabsConfig
}) {
  const t = useTranslate();
  const config = reactHeadless.useConfig();
  const [activeStore, setActiveStore] = react.useState(storeId || (tabsConfig == null ? void 0 : tabsConfig[0].storeId));
  const store = reactHeadless.useNotifications(activeStore);
  if (!store)
    return null;
  const hasNotifications = !store.isEmpty;
  const showPreferencesButton = notificationPreferencesEnabled != null ? notificationPreferencesEnabled : ramda.pathOr(true, ["features", "notificationPreferences", "enabled"], config.inbox);
  const handleMarkAllAsRead = () => {
    store == null ? void 0 : store.markAllAsRead();
    onAllRead == null ? void 0 : onAllRead();
  };
  const showTabs = tabsConfig && activeStore;
  const tabs2 = showTabs ? /* @__PURE__ */ jsxRuntime$1.jsx(HeaderTabs, { activeTab: activeStore, onChange: setActiveStore, tabsConfig }) : null;
  const title = /* @__PURE__ */ jsxRuntime$1.jsx(Text, { id: "header.title", defaultMessage: "Notifications" });
  return /* @__PURE__ */ jsxRuntime$1.jsxs(Layout, { order: layout, children: [
    /* @__PURE__ */ jsxRuntime$1.jsx(
      Header,
      {
        title: showTabs ? tabs2 : title,
        actions: /* @__PURE__ */ jsxRuntime$1.jsxs(react.Fragment, { children: [
          hasNotifications ? /* @__PURE__ */ jsxRuntime$1.jsx(IconButton$1, { onClick: handleMarkAllAsRead, "aria-label": t("header.mark-all-read", "Mark all read"), children: /* @__PURE__ */ jsxRuntime$1.jsx(CheckMarkIcon, {}) }) : null,
          showPreferencesButton ? /* @__PURE__ */ jsxRuntime$1.jsx(
            IconButton$1,
            {
              onClick: () => setView("preferences"),
              "aria-label": t("preferences.toggle", "Notification preferences"),
              children: /* @__PURE__ */ jsxRuntime$1.jsx(SettingsIcon, {})
            }
          ) : null
        ] })
      },
      "header"
    ),
    /* @__PURE__ */ jsxRuntime$1.jsx("div", { css: { flex: 1, overflowY: "hidden" }, children: !store.lastFetchedAt ? null : hasNotifications ? /* @__PURE__ */ jsxRuntime$1.jsx(
      NotificationInboxContent,
      {
        store,
        onNotificationClick,
        NotificationItem
      }
    ) : /* @__PURE__ */ jsxRuntime$1.jsx(EmptyInboxPlaceholder, {}) }, "content"),
    /* @__PURE__ */ jsxRuntime$1.jsx(EnablePushNotificationsBanner, {}, "push-notifications-banner"),
    /* @__PURE__ */ jsxRuntime$1.jsx(Footer, {}, "footer")
  ] });
}
function ToggleInput({ id, label, value = false, onClick }) {
  const handleClick = () => {
    onClick(!value);
  };
  return /* @__PURE__ */ jsxRuntime.jsxs("div", { children: [
    label ? /* @__PURE__ */ jsxRuntime.jsx("label", { htmlFor: id, style: { marginRight: "14px" }, children: label }) : null,
    /* @__PURE__ */ jsxRuntime.jsx("input", { id, type: "checkbox", onClick: handleClick, defaultChecked: value })
  ] });
}
function CategoryPreferences({ category, onChange }) {
  const preferences = reactHeadless.useNotificationPreferences();
  const channels = category.channels;
  const t = useTranslate();
  const updatePreferences = async (channel, channelEnabled) => {
    const preference = {
      label: category.label,
      slug: category.slug,
      channels: [
        {
          label: channel.label,
          slug: channel.slug,
          enabled: channelEnabled
        }
      ]
    };
    await preferences.save({ categories: [preference] });
    onChange == null ? void 0 : onChange({ category: preference });
  };
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
    /* @__PURE__ */ jsxRuntime.jsx("div", { children: t(`preferences.categories.${category.slug}`, category.label) }),
    channels.map((channel) => /* @__PURE__ */ jsxRuntime.jsx("div", { children: /* @__PURE__ */ jsxRuntime.jsx(
      ToggleInput,
      {
        id: `${category.slug}-${channel.slug}`,
        value: channel.enabled,
        onClick: (value) => updatePreferences(channel, value)
      }
    ) }, channel.slug))
  ] });
}
function PreferencesCategories({
  channels: selectedChannels,
  categories: selectedCategories,
  onChange
}) {
  const preferences = reactHeadless.useNotificationPreferences();
  const headerStyle = react$1.css`
    opacity: 0.8;
    text-transform: uppercase;
    font-size: 0.7em !important;
  `;
  react.useEffect(() => {
    if (!preferences.lastFetchedAt) {
      preferences.fetch();
    }
  }, [preferences]);
  const categories = react.useMemo(() => {
    var _a;
    if (!((_a = preferences.categories) == null ? void 0 : _a.length)) {
      return preferences.categories;
    }
    let categories2 = preferences.categories;
    if (selectedCategories == null ? void 0 : selectedCategories.length) {
      const categoriesSet = new Set(selectedCategories);
      categories2 = categories2.filter((category) => categoriesSet.has(category.slug));
    }
    if (selectedChannels == null ? void 0 : selectedChannels.length) {
      const channelsSet = new Set(selectedChannels);
      categories2 = categories2.map((category) => __spreadProps(__spreadValues({}, category), {
        channels: category.channels.filter((channel) => channelsSet.has(channel.slug))
      }));
    }
    return categories2;
  }, [preferences.categories, selectedChannels, selectedCategories]);
  if (!categories.length) {
    return null;
  }
  const channelHeaders = categories[0].channels;
  return /* @__PURE__ */ jsxRuntime$1.jsx(
    "div",
    {
      css: react$1.css`
        flex: 1;
        padding: 16px 20px !important;
        height: 100%;
        overflow-y: auto;
      `,
      children: /* @__PURE__ */ jsxRuntime$1.jsxs(
        "div",
        {
          css: react$1.css`
          display: grid;
          gap: 1em;
          grid-template-columns: 2fr ${" 1fr".repeat(channelHeaders.length).trim()};
        `,
          children: [
            /* @__PURE__ */ jsxRuntime$1.jsx("div", {}),
            channelHeaders.map((header2) => /* @__PURE__ */ jsxRuntime$1.jsx("div", { css: headerStyle, children: header2.label }, header2.slug)),
            categories.map((category) => /* @__PURE__ */ jsxRuntime$1.jsx(CategoryPreferences, { category, onChange }, category.slug))
          ]
        }
      )
    }
  );
}
function PreferencesView({
  layout,
  setView,
  NotificationPreferences = PreferencesCategories
}) {
  const t = useTranslate();
  return /* @__PURE__ */ jsxRuntime$1.jsxs(Layout, { order: layout, children: [
    /* @__PURE__ */ jsxRuntime$1.jsx(
      Header,
      {
        title: /* @__PURE__ */ jsxRuntime$1.jsx(Text, { id: "preferences.title", defaultMessage: "Preferences" }),
        actions: /* @__PURE__ */ jsxRuntime$1.jsx(IconButton$1, { onClick: () => setView("inbox"), "aria-label": t("preferences.close", "Close preferences"), children: /* @__PURE__ */ jsxRuntime$1.jsx(CloseIcon, {}) })
      },
      "header"
    ),
    /* @__PURE__ */ jsxRuntime$1.jsx("div", { css: { flex: 1, overflowY: "hidden" }, children: /* @__PURE__ */ jsxRuntime$1.jsx(NotificationPreferences, {}) }, "content"),
    /* @__PURE__ */ jsxRuntime$1.jsx(Footer, {}, "footer")
  ] });
}
function useContainerBorderRadius(layout) {
  const theme = useTheme();
  const { container: containerTheme, header: headerTheme, footer: footerTheme } = theme;
  let firstComponentTheme = headerTheme;
  if (layout[0] === "footer")
    firstComponentTheme = footerTheme;
  else if (layout[0] === "container")
    firstComponentTheme = containerTheme;
  let lastComponentTheme = footerTheme;
  if (layout[layout.length - 1] === "header")
    lastComponentTheme = headerTheme;
  else if (layout[layout.length - 1] === "container")
    lastComponentTheme = containerTheme;
  return [
    firstComponentTheme.borderRadius,
    firstComponentTheme.borderRadius,
    lastComponentTheme.borderRadius,
    lastComponentTheme.borderRadius
  ];
}
function StyledContainer({ height, children, layout }) {
  const { container: theme } = useTheme();
  const [ltBorderRadius, rtBorderRadius, rbBorderRadius, lbBorderRadius] = useContainerBorderRadius(layout);
  return /* @__PURE__ */ jsxRuntime$1.jsx(
    "div",
    {
      css: [
        cleanslate$1,
        react$1.css`
          background-color: ${theme.backgroundColor};
          border-radius: ${ltBorderRadius} ${rtBorderRadius} ${rbBorderRadius} ${lbBorderRadius};
          color: ${theme.textColor};
          display: flex;
          flex-direction: column;
          font-family: ${theme.fontFamily} !important;
          font-weight: ${theme.fontWeight} !important;
          height: ${height ? `${height}px` : "auto"};
          overflow: hidden;
          border: ${theme.borderColor ? `1px solid ${theme.borderColor} !important` : void 0};
          box-shadow: ${theme.boxShadow ? `${theme.boxShadow} !important` : void 0};
        `
      ],
      children
    }
  );
}
function NotificationInbox(_m) {
  var _n = _m, {
    height,
    layout = ["header", "content", "push-notifications-banner", "footer"],
    tabs: tabs2
  } = _n, props = __objRest(_n, [
    "height",
    "layout",
    "tabs"
  ]);
  const [view, setView] = react.useState("inbox");
  const { isFetchingConfig } = useMagicBellContext();
  if (isFetchingConfig)
    return null;
  return /* @__PURE__ */ jsxRuntime.jsx(StyledContainer, { height, layout, children: view === "preferences" ? /* @__PURE__ */ jsxRuntime.jsx(PreferencesView, __spreadProps(__spreadValues({}, props), { layout, setView })) : /* @__PURE__ */ jsxRuntime.jsx(NotificationsView, __spreadProps(__spreadValues({}, props), { tabs: tabs2, layout, setView })) });
}
function Arrow({ placement }) {
  const theme = useTheme();
  const { header: headerTheme, footer: footerTheme } = theme;
  return /* @__PURE__ */ jsxRuntime$1.jsx(
    "div",
    {
      "data-popper-arrow": true,
      "data-popper-placement": placement,
      css: react$1.css`
        &,
        &:before {
          position: absolute;
          width: 18px !important;
          height: 18px !important;
          z-index: -1;
          border-radius: 2px !important;
        }

        &:before {
          content: '';
          transform: rotate(45deg);
          left: 0;
        }

        &[data-popper-placement^='top'] {
          bottom: -4px;

          &:before {
            background: ${headerTheme.backgroundColor};
          }
        }

        &[data-popper-placement^='bottom'] {
          top: -4px;

          &:before {
            background: ${footerTheme.backgroundColor};
          }
        }

        &[data-popper-placement^='left'] {
          right: -4px;
        }

        &[data-popper-placement^='right'] {
          left: -4px;
        }
      `
    }
  );
}
function StyledPopoverContainer({ width = 400, children, attrs }) {
  return /* @__PURE__ */ jsxRuntime$1.jsx(
    "div",
    __spreadProps(__spreadValues({
      css: react$1.css`
        width: ${width}px;
        max-width: calc(100vw - 10px);
      `
    }, attrs), {
      children
    })
  );
}
function FloatingInboxContainer({
  launcherRef,
  isOpen,
  toggle,
  placement = "auto",
  width = 500,
  closeOnClickOutside = true,
  popperOptions,
  hideArrow = false,
  layout = ["header", "content", "push-notifications-banner", "footer"],
  children
}) {
  const handleClickOutside = () => {
    if (closeOnClickOutside)
      toggle == null ? void 0 : toggle();
  };
  return /* @__PURE__ */ jsxRuntime.jsx(
    Popover,
    {
      isOpen,
      launcherRef,
      onClickOutside: handleClickOutside,
      placement,
      popperOptions,
      children: (attrs) => /* @__PURE__ */ jsxRuntime.jsxs(StyledPopoverContainer, { width, attrs, layout, children: [
        children,
        hideArrow ? null : /* @__PURE__ */ jsxRuntime.jsx(Arrow, { placement: attrs["data-placement"] })
      ] })
    }
  );
}
function FloatingNotificationInbox(_o) {
  var _p = _o, {
    launcherRef,
    isOpen,
    toggle,
    placement = "auto",
    width = 500,
    onNotificationClick,
    closeOnClickOutside = true,
    closeOnNotificationClick = true,
    popperOptions,
    hideArrow = false,
    layout
  } = _p, inboxProps = __objRest(_p, [
    "launcherRef",
    "isOpen",
    "toggle",
    "placement",
    "width",
    "onNotificationClick",
    "closeOnClickOutside",
    "closeOnNotificationClick",
    "popperOptions",
    "hideArrow",
    "layout"
  ]);
  const handleNotificationClick = (notification) => {
    if (closeOnNotificationClick)
      toggle == null ? void 0 : toggle();
    return onNotificationClick == null ? void 0 : onNotificationClick(notification);
  };
  const { isFetchingConfig } = useMagicBellContext();
  if (isFetchingConfig)
    return null;
  return /* @__PURE__ */ jsxRuntime.jsx(
    FloatingInboxContainer,
    {
      launcherRef,
      isOpen,
      toggle,
      placement,
      width,
      closeOnClickOutside,
      popperOptions,
      hideArrow,
      layout,
      children: /* @__PURE__ */ jsxRuntime.jsx(NotificationInbox, __spreadValues({ onNotificationClick: handleNotificationClick, layout }, inboxProps))
    }
  );
}
const NO_PROVIDER = "MAGICBELL_NO_PROVIDER";
const CurrentProviderContext = react.createContext(NO_PROVIDER);
const CurrentProviderContext$1 = CurrentProviderContext;
const de = {
  header: {
    title: "Benachrichtigungen",
    "mark-all-read": "Alle als gelesen markieren"
  },
  notification: {
    "mark-as-read": "Als gelesen markieren",
    "mark-as-unread": "Als ungelesen markieren",
    delete: "L\xF6schen",
    menu: "Menu"
  },
  "web-push-notifications": {
    notice: "Wenn Sie Browser-Benachrichtigungen aktivieren, bleiben Sie noch besser auf dem Laufenden.",
    "enable-now": "Aktivieren"
  },
  messages: {
    "empty-inbox": "Alles Sauber!<br>Wir melden uns, wenn's was neues gibt!"
  },
  preferences: {
    title: "Einstellungen",
    toggle: "Benachrichtigungseinstellungen",
    close: "Einstellungen schlie\xDFen"
  }
};
const de$1 = de;
const es = {
  header: {
    title: "Notificaciones",
    "mark-all-read": "Marcar todo como le\xEDdo"
  },
  notification: {
    "mark-as-read": "Marcar como le\xEDdo",
    "mark-as-unread": "Marcar como no le\xEDdo",
    delete: "Eliminar",
    menu: "Menu"
  },
  "web-push-notifications": {
    notice: "Active notificaciones en su navegador para mantenerse actualizado",
    "enable-now": "Activar"
  },
  messages: {
    "empty-inbox": "\xA1No tiene notificaciones!<br>Le haremos saber cuando llegue una."
  },
  preferences: {
    title: "Preferencias",
    toggle: "Preferencias de notificaci\xF3n",
    close: "Cerrar preferencias"
  }
};
const es$1 = es;
const pt_br = {
  header: {
    title: "Notifica\xE7\xF5es",
    "mark-all-read": "Marcar tudo como lido"
  },
  notification: {
    "mark-as-read": "Marcar como lido",
    "mark-as-unread": "Marcar como n\xE3o lido",
    delete: "Apagar",
    menu: "Menu"
  },
  "web-push-notifications": {
    notice: "Ao ativar as notifica\xE7\xF5es do navegador, voc\xEA ficar\xE1 ainda melhor atualizado.",
    "enable-now": "Ativar"
  },
  messages: {
    "empty-inbox": "Nenhuma notifica\xE7\xE3o dispon\xEDvel!",
    "server-error": "N\xE3o conseguimos recuperar suas notifica\xE7\xF5es.<br>Por favor, volte em breve.",
    "no-internet-connection": "N\xE3o conseguimos nos conectar \xE0 Internet.<br>Por favor, verifique sua conex\xE3o."
  },
  preferences: {
    title: "Prefer\xEAncias",
    toggle: "Prefer\xEAncias de notifica\xE7\xE3o",
    close: "Fechar prefer\xEAncias"
  }
};
const pt_br$1 = pt_br;
function setDayjsLocale(localeName) {
  const standardLocaleName = localeName.toLowerCase().replace("_", "-");
  dayjs__default.default.locale(standardLocaleName);
}
function useLocale(locale) {
  const localeName = typeof locale === "string" ? locale : locale.name;
  setDayjsLocale(localeName);
  const defaultLocales = { es: es$1, pt_BR: pt_br$1, de: de$1 };
  if (typeof locale === "string") {
    return defaultLocales[locale];
  } else {
    const customLocales = ramda.mergeDeepRight(defaultLocales, { [localeName]: locale.translations });
    return customLocales[localeName];
  }
}
const internals = {
  appInfo: {
    name: "@magicbell/magicbell-react",
    version: "10.10.1"
  }
};
function MagicBellProvider(_q) {
  var _r = _q, { children, theme, images, locale } = _r, settings = __objRest(_r, ["children", "theme", "images", "locale"]);
  return /* @__PURE__ */ jsxRuntime.jsx(reactHeadless.MagicBellProvider, __spreadProps(__spreadValues(__spreadValues({}, internals), settings), { children: /* @__PURE__ */ jsxRuntime.jsx(SettingsProviders, __spreadProps(__spreadValues({}, settings), { theme, images, locale, children })) }));
}
function SettingsProviders(_s) {
  var _t = _s, { children, theme, locale, images } = _t, props = __objRest(_t, ["children", "theme", "locale", "images"]);
  const needsRemoteConfig = !theme || !locale || !images;
  const [config, setConfig] = react.useState({});
  const [isFetchingConfig, setIsFetchingConfig] = react.useState(needsRemoteConfig);
  react.useEffect(() => {
    if (!needsRemoteConfig)
      return;
    const client = reactHeadless.clientSettings.getState().getClient();
    client.request({
      method: "POST",
      path: "/integrations/inbox/installations"
    }).then((response) => {
      if (!("inbox" in response))
        return;
      setConfig(response.inbox);
    }).catch(() => void 0).finally(() => setIsFetchingConfig(false));
  }, [needsRemoteConfig, props.apiKey, props.userExternalId, props.userExternalId]);
  const textTranslations = useLocale(locale || config.locale || "en");
  return /* @__PURE__ */ jsxRuntime.jsx(CurrentProviderContext$1.Provider, { value: "DEFAULT_MAGICBELL", children: /* @__PURE__ */ jsxRuntime.jsx(TranslationsProvider, { value: textTranslations, children: /* @__PURE__ */ jsxRuntime.jsx(MagicBellThemeProvider, { value: theme || config.theme, children: /* @__PURE__ */ jsxRuntime.jsx(MagicBellContext$1.Provider, { value: { images: images || config.images, isFetchingConfig }, children }) }) }) });
}
function MagicBellChildrenWrapper(_u) {
  var _v = _u, { children, apiKey } = _v, settings = __objRest(_v, ["children", "apiKey"]);
  const currentContext = react.useContext(CurrentProviderContext$1);
  if (currentContext === NO_PROVIDER) {
    if (!apiKey)
      return null;
    return /* @__PURE__ */ jsxRuntime.jsx(MagicBellProvider, __spreadProps(__spreadValues({ apiKey }, settings), { children }));
  }
  return /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children });
}
const defaultInbox = (props) => /* @__PURE__ */ jsxRuntime.jsx(FloatingNotificationInbox, __spreadValues({ height: 500 }, props));
function MagicBell(_w) {
  var _x = _w, {
    children = defaultInbox,
    BellIcon: BellIcon2,
    Badge: Badge2,
    defaultIsOpen = false,
    onNewNotification,
    onToggle,
    bellCounter = "unseen",
    isOpen: externalIsOpen
  } = _x, settings = __objRest(_x, [
    "children",
    "BellIcon",
    "Badge",
    "defaultIsOpen",
    "onNewNotification",
    "onToggle",
    "bellCounter",
    "isOpen"
  ]);
  const launcherRef = react.useRef(null);
  const isControlled = typeof externalIsOpen !== "undefined";
  const [internalIsOpen, toggleInternal] = useToggle__default.default(defaultIsOpen);
  const isOpen = isControlled ? externalIsOpen : internalIsOpen;
  const handleToggle = () => {
    if (!isControlled) {
      toggleInternal();
    }
    onToggle == null ? void 0 : onToggle(!isOpen);
  };
  const handleNewNotification = (notification) => {
    onNewNotification == null ? void 0 : onNewNotification(notification);
  };
  reactHeadless.useMagicBellEvent("notifications.new", handleNewNotification);
  return /* @__PURE__ */ jsxRuntime.jsx(MagicBellChildrenWrapper, __spreadProps(__spreadValues({}, settings), { children: /* @__PURE__ */ jsxRuntime.jsxs("div", { children: [
    /* @__PURE__ */ jsxRuntime.jsx("div", { ref: launcherRef, "aria-expanded": isOpen, children: /* @__PURE__ */ jsxRuntime.jsx(Bell, { onClick: handleToggle, Icon: BellIcon2, Badge: Badge2, counter: bellCounter }) }),
    isOpen && children({ isOpen, toggle: handleToggle, launcherRef })
  ] }) }));
}
function PushNotificationsSubscriber({
  children,
  serviceWorkerPath = "/service-worker.js",
  skipServiceWorkerRegistration = false
}) {
  const config = reactHeadless.useConfig();
  const isPushAPISupported = webpush.isSupported();
  react.useEffect(() => {
    if (skipServiceWorkerRegistration)
      return;
    webpush.registerServiceWorker({ path: serviceWorkerPath }).catch((error) => {
      console.error(`Error registering service worker: ${error}`);
    });
  }, [serviceWorkerPath, skipServiceWorkerRegistration]);
  const createSubscription = async () => {
    if (!config || !config.channels)
      ;
    const url = new URL(config.channels.webPush.config.subscribeUrl || "");
    return webpush.subscribe({
      host: "https://api.magicbell.com",
      project: String(url.searchParams.get("project")),
      token: String(url.searchParams.get("access_token")),
      serviceWorkerPath
    });
  };
  return children({ createSubscription, isPushAPISupported });
}
const fonts = {
  sans: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif',
  mono: `ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace`
};
const colors$1 = {
  bg: "#FFFFFF",
  caption: "#0f172a",
  text: "#3A424D",
  stroke: "#e2e8f0",
  accent: "#3498F4",
  badge: "#DF4759",
  transparent: "transparent"
};
const headerFooterProps$1 = {
  backgroundColor: colors$1.accent,
  backgroundOpacity: 1,
  borderRadius: "8px",
  fontFamily: fonts.sans,
  fontSize: "14px",
  fontWeight: "inherit",
  textAlign: "left",
  textColor: colors$1.bg,
  textTransform: "uppercase"
};
const classicTheme = {
  prose: {
    headings: colors$1.caption,
    links: colors$1.caption,
    bold: colors$1.caption,
    hr: colors$1.stroke,
    quotes: colors$1.text,
    quoteBorders: colors$1.stroke,
    captions: colors$1.caption,
    code: colors$1.text,
    preCode: colors$1.stroke,
    preBg: colors$1.text,
    thBorders: colors$1.stroke,
    tdBorders: colors$1.stroke,
    buttonBorders: colors$1.text,
    buttons: colors$1.caption,
    fontMono: fonts.mono
  },
  icon: {
    borderColor: colors$1.accent
  },
  header: __spreadProps(__spreadValues({}, headerFooterProps$1), {
    padding: "16px 24px"
  }),
  footer: __spreadProps(__spreadValues({}, headerFooterProps$1), {
    padding: "12px 24px"
  }),
  banner: {
    backgroundColor: colors$1.accent,
    backgroundOpacity: 0.1,
    textColor: colors$1.text,
    fontFamily: fonts.sans,
    textAlign: "left",
    fontSize: "12px",
    boxShadow: "none"
  },
  dialog: {
    backgroundColor: colors$1.bg,
    textColor: colors$1.text,
    accentColor: colors$1.accent
  },
  unseenBadge: {
    backgroundColor: colors$1.badge,
    backgroundOpacity: 1,
    borderRadius: "2px",
    fontFamily: fonts.sans,
    fontWeight: "inherit",
    fontSize: "10px",
    textAlign: "center",
    textColor: "white",
    textTransform: "none"
  },
  container: {
    backgroundColor: colors$1.bg,
    fontFamily: fonts.sans,
    fontSize: "12px",
    textColor: colors$1.text,
    boxShadow: "0px 20px 25px rgba(84, 95, 111, 0.1), 0px 10px 10px rgba(84, 95, 111, 0.04)"
  },
  notification: {
    default: {
      backgroundColor: "transparent",
      backgroundOpacity: 0,
      borderRadius: "8px",
      fontFamily: fonts.sans,
      fontSize: "12px",
      fontWeight: "inherit",
      textAlign: "left",
      textColor: colors$1.text,
      textTransform: "none",
      margin: "4px",
      padding: "16px 20px 16px 12px",
      title: {
        fontFamily: "inherit",
        fontSize: "14px",
        fontWeight: 500,
        textColor: colors$1.caption
      },
      hover: {
        backgroundColor: colors$1.accent,
        backgroundOpacity: 0.1
      },
      state: {
        color: "transparent"
      }
    },
    unread: {
      backgroundOpacity: 0,
      state: {
        color: colors$1.accent
      }
    },
    unseen: {
      backgroundColor: colors$1.accent,
      backgroundOpacity: 0.05,
      state: {
        color: colors$1.accent
      }
    }
  }
};
const colors = {
  bg: "#FFFFFF",
  caption: "#15091F",
  text: "#3A424D",
  stroke: "#EFEEF1",
  accent: "#5225C1",
  badge: "#F80808",
  bgHighlight: "#F7F6F9",
  bgActive: "#F0EDF8",
  transparent: "transparent"
};
const headerFooterProps = {
  backgroundColor: colors.bg,
  borderRadius: "8px",
  textColor: colors.accent,
  borderColor: colors.stroke
};
const flatTheme = {
  prose: {
    headings: colors.caption,
    links: colors.caption,
    bold: colors.caption,
    hr: colors.stroke,
    quotes: colors.text,
    quoteBorders: colors.stroke,
    captions: colors.caption,
    code: colors.text,
    preCode: colors.stroke,
    preBg: colors.text,
    thBorders: colors.stroke,
    tdBorders: colors.stroke,
    buttonBorders: colors.text,
    buttons: colors.caption
  },
  icon: {
    borderColor: colors.accent
  },
  header: headerFooterProps,
  footer: headerFooterProps,
  banner: {
    backgroundColor: colors.bg,
    backgroundOpacity: 1,
    textColor: colors.text,
    fontFamily: fonts$1.sans,
    textAlign: "left",
    fontSize: "12px",
    boxShadow: `inset 0 1px 0 0 ${colors.stroke}`
  },
  dialog: {
    backgroundColor: colors.bg,
    textColor: colors.text,
    accentColor: colors.accent
  },
  unseenBadge: {
    backgroundColor: colors.badge
  },
  container: {
    backgroundColor: colors.bg,
    textColor: colors.text,
    boxShadow: "none",
    borderColor: colors.accent
  },
  notification: {
    default: {
      backgroundColor: colors.bgHighlight,
      borderRadius: "0",
      textColor: colors.text,
      margin: "0",
      title: {
        textColor: colors.caption
      },
      hover: {
        backgroundColor: colors.bgActive,
        backgroundOpacity: 1
      },
      state: {
        color: colors.transparent
      }
    },
    unread: {
      backgroundColor: colors.bg,
      hover: {
        backgroundColor: colors.bgActive
      },
      state: {
        color: colors.accent
      }
    },
    unseen: {
      backgroundColor: colors.bg,
      hover: {
        backgroundColor: colors.bgActive
      },
      state: {
        color: colors.accent
      }
    }
  }
};
{
  const testFunc = function testFn() {
  };
  warning__default.default(
    (testFunc.name || testFunc.toString()).indexOf("testFn") !== -1,
    `It looks like you're using a minified copy of the development build of ${"@magicbell/magicbell-react"}. When deploying your app to production, make sure to use the production build which is faster and does not print development warnings.`
  );
}
Object.defineProperty(exports, "clientSettings", {
  enumerable: true,
  get: () => reactHeadless.clientSettings
});
Object.defineProperty(exports, "eventAggregator", {
  enumerable: true,
  get: () => reactHeadless.eventAggregator
});
Object.defineProperty(exports, "useMagicBellEvent", {
  enumerable: true,
  get: () => reactHeadless.useMagicBellEvent
});
Object.defineProperty(exports, "useNotification", {
  enumerable: true,
  get: () => reactHeadless.useNotification
});
Object.defineProperty(exports, "useNotificationPreferences", {
  enumerable: true,
  get: () => reactHeadless.useNotificationPreferences
});
Object.defineProperty(exports, "useNotificationStoresCollection", {
  enumerable: true,
  get: () => reactHeadless.useNotificationStoresCollection
});
Object.defineProperty(exports, "useNotificationUnmount", {
  enumerable: true,
  get: () => reactHeadless.useNotificationUnmount
});
Object.defineProperty(exports, "useNotifications", {
  enumerable: true,
  get: () => reactHeadless.useNotifications
});
exports.Badge = Badge;
exports.Bell = Bell;
exports.BellIcon = BellIcon$1;
exports.ClassicBellIcon = BellIcon;
exports.ClickableNotification = ClickableNotification;
exports.EnablePushNotificationsButton = EnablePushNotificationsButton;
exports.FloatingInboxContainer = FloatingInboxContainer;
exports.FloatingNotificationInbox = FloatingNotificationInbox;
exports.FloatingNotificationInboxArrow = Arrow;
exports.Footer = Footer;
exports.Header = Header;
exports.MagicBellContext = MagicBellContext$1;
exports.MagicBellProvider = MagicBellProvider;
exports.MagicBellThemeContext = MagicBellThemeContext$1;
exports.NotificationContent = NotificationContent;
exports.NotificationInbox = NotificationInbox;
exports.NotificationList = NotificationList;
exports.NotificationPreferences = PreferencesCategories;
exports.NotificationState = NotificationState;
exports.Popover = Popover;
exports.PushNotificationsSubscriber = PushNotificationsSubscriber;
exports.StyledNotificationContainer = StyledContainer$1;
exports.Timestamp = Timestamp;
exports.classicTheme = classicTheme;
exports.darken = darken;
exports.default = MagicBell;
exports.defaultMagicBellTheme = defaultTheme;
exports.flatTheme = flatTheme;
exports.lightTheme = lightTheme;
exports.merge = merge;
exports.toRGBA = toRGBA;
exports.useMagicBellContext = useMagicBellContext;
exports.useTheme = useTheme;
//# sourceMappingURL=magicbell-magicbell-react.cjs.js.map
