{"version":3,"file":"magicbell-webpush.cjs.min.js","sources":["../src/index.ts"],"sourcesContent":["type RequestOptions = {\n  token: string;\n  project: string;\n  baseURL: string;\n};\n\ntype Config = {\n  user: { id: string; email?: string | null; external_id?: string | null; hmac?: string | null };\n  project: { id: number; subdomain: string; api_key: string; vapid_public_key: string };\n  website_push_id: string;\n};\n\ntype SubscribeOptions = {\n  token: string;\n  project: string;\n  serviceWorkerPath?: string;\n  host?: string;\n};\n\ntype Subscription = {\n  created_at: string;\n  device_token: string;\n  discarded_at: string | null;\n  id: string;\n  platform: string;\n  user_id: string;\n};\n\ntype AuthTokenOptions = {\n  host?: string;\n  apiKey: string;\n} & ({ userEmail: string; userHmac?: string } | { userExternalId: string; userHmac?: string });\n\nlet _config: Config | null = null;\nlet _cacheKey = '';\n\nconst DEFAULT_HOST = 'https://api.magicbell.com';\n\nconst api = {\n  async getAuthToken(options: AuthTokenOptions): Promise<Pick<SubscribeOptions, 'token' | 'project' | 'host'>> {\n    const headers: Record<string, string> = {\n      accept: 'application/json',\n      'content-type': 'application/json',\n      'x-magicbell-api-key': options.apiKey,\n    };\n\n    if ('userExternalId' in options && options.userExternalId) {\n      headers['x-magicbell-user-external-id'] = options.userExternalId;\n    } else if ('userEmail' in options && options.userEmail) {\n      headers['x-magicbell-user-email'] = options.userEmail;\n    } else {\n      throw new Error('Missing user email or external ID');\n    }\n\n    if (options.userHmac) {\n      headers['x-magicbell-user-hmac'] = options.userHmac;\n    }\n\n    return fetch(`${options.host || DEFAULT_HOST}/config`, {\n      method: 'GET',\n      headers: headers,\n    })\n      .then((x) => x.json())\n      .then((x) => {\n        const url = new URL(x.web_push_notifications.subscribe_url);\n\n        return {\n          host: options.host || DEFAULT_HOST,\n          token: url.searchParams.get('access_token') || null,\n          project: url.searchParams.get('project') || null,\n        };\n      });\n  },\n\n  async getConfig({ token, project, baseURL }: RequestOptions) {\n    const cacheKey = [token, project, baseURL].join('-');\n    if (_config && _cacheKey === cacheKey) return _config;\n\n    return fetch(`${baseURL}/web_push_subscriptions?access_token=${token}&project=${project}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    })\n      .then((x) => x.json() as Promise<{ push_subscription: Config }>)\n      .then((x) => {\n        _config = x.push_subscription;\n        _cacheKey = cacheKey;\n        return _config;\n      });\n  },\n\n  async getSubscriptions({ token, project, baseURL }: RequestOptions): Promise<Array<Subscription>> {\n    const config = await this.getConfig({ token, project, baseURL });\n    if (!config.project.api_key) throw new Error('Missing API key');\n    const headers: Record<string, string> = {\n      accept: 'application/json',\n      'content-type': 'application/json',\n      'x-magicbell-api-key': config.project.api_key,\n    };\n    if (config.user.email) {\n      headers['x-magicbell-user-email'] = config.user.email;\n    } else if (config.user.external_id) {\n      headers['x-magicbell-user-external-id'] = config.user.external_id;\n    }\n    if (config.user.hmac) {\n      headers['x-magicbell-user-hmac'] = config.user.hmac;\n    }\n    return fetch(`${baseURL}/push_subscriptions`, {\n      method: 'GET',\n      headers,\n    })\n      .then((result) => result.json())\n      .then((result) => result?.push_subscriptions || []);\n  },\n\n  async updateSubscription({ token, project, baseURL }: RequestOptions, subscription: PushSubscriptionJSON) {\n    return fetch(`${baseURL}/web_push_subscriptions?access_token=${token}&project=${project}`, {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n        accept: 'application/json',\n      },\n      body: JSON.stringify({\n        web_push_subscription: {\n          data: subscription,\n        },\n      }),\n    })\n      .then((x) => x.json() as Promise<{ web_push_subscription: { id: string } }>)\n      .then((x) => x.web_push_subscription);\n  },\n};\n\nexport function isSupported() {\n  if (typeof window === 'undefined' || typeof navigator === 'undefined') return false;\n  return 'PushManager' in window && 'serviceWorker' in navigator;\n}\n\nexport async function prefetchConfig(options: SubscribeOptions) {\n  await api.getConfig({ ...options, baseURL: options.host || DEFAULT_HOST });\n}\n\nexport async function registerServiceWorker({ path = '/sw.js' }: { path?: string } = {}) {\n  // don't register a service-worker if there's already one\n  if (navigator.serviceWorker.controller) return navigator.serviceWorker.ready;\n  await navigator.serviceWorker.register(path);\n  return navigator.serviceWorker.ready;\n}\n\n/**\n * Checks if the current user has an active push subscription that is registered by MagicBell.\n */\nexport async function isSubscribed(options: SubscribeOptions): Promise<boolean> {\n  const baseURL = options.host || DEFAULT_HOST;\n  const subscriptions = await api.getSubscriptions({ ...options, baseURL });\n  const registration = await registerServiceWorker({ path: options.serviceWorkerPath });\n  const activeSubscription = await registration?.pushManager?.getSubscription();\n\n  if (!activeSubscription?.endpoint) return false;\n  return subscriptions.some((subscription) => subscription.device_token === activeSubscription.endpoint);\n}\n\n/**\n * Request permission to send push notifications and post the subscription to the MagicBell API.\n */\nexport async function subscribe(options: SubscribeOptions) {\n  if (!isSupported()) {\n    throw new Error('Push notifications are not supported in this browser');\n  }\n\n  const baseURL = options.host || DEFAULT_HOST;\n  const config = await api.getConfig({ ...options, baseURL });\n  const registration = await registerServiceWorker({ path: options.serviceWorkerPath });\n\n  if (!registration?.pushManager) {\n    throw new Error('Push notifications are not supported in this browser');\n  }\n\n  // remove active subscription if there's any\n  const activeSubscription = await registration.pushManager.getSubscription();\n  if (activeSubscription) {\n    await activeSubscription.unsubscribe().catch(() => void 0);\n  }\n\n  // strip the base64 padding, it's either that or convert to uint8array\n  const applicationServerKey = config.project.vapid_public_key.replace(/=/g, '');\n\n  const subscription = await registration.pushManager\n    .subscribe({ userVisibleOnly: true, applicationServerKey })\n    .then((x) => x.toJSON());\n\n  if (!('endpoint' in subscription)) {\n    throw new Error('Failed to subscribe to push notifications, browser did not return an subscription endpoint.');\n  }\n\n  await api.updateSubscription({ ...options, baseURL }, subscription);\n}\n\nexport async function getAuthToken(options: AuthTokenOptions) {\n  return api.getAuthToken(options);\n}\n"],"names":["_config","_cacheKey","DEFAULT_HOST","api","options","headers","x","url","token","project","baseURL","cacheKey","config","result","subscription","isSupported","prefetchConfig","__spreadProps","__spreadValues","registerServiceWorker","path","isSubscribed","subscriptions","registration","activeSubscription","_a","subscribe","applicationServerKey","getAuthToken"],"mappings":"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"}