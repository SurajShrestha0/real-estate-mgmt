/** 
 * @license @magicbell/webpush v1.4.2
 *
 * Copyright (c) MagicBell Inc. and its affiliates.
 *
 * This source code is licensed under the license found in the
 * LICENSE file in the root directory of this source tree.
 */

"use strict";var m=Object.defineProperty,y=Object.defineProperties;var _=Object.getOwnPropertyDescriptors;var b=Object.getOwnPropertySymbols;var k=Object.prototype.hasOwnProperty,j=Object.prototype.propertyIsEnumerable;var g=(e,t,r)=>t in e?m(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,a=(e,t)=>{for(var r in t||(t={}))k.call(t,r)&&g(e,r,t[r]);if(b)for(var r of b(t))j.call(t,r)&&g(e,r,t[r]);return e},c=(e,t)=>y(e,_(t));Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});let h=null,f="";const o="https://api.magicbell.com",u={async getAuthToken(e){const t={accept:"application/json","content-type":"application/json","x-magicbell-api-key":e.apiKey};if("userExternalId"in e&&e.userExternalId)t["x-magicbell-user-external-id"]=e.userExternalId;else if("userEmail"in e&&e.userEmail)t["x-magicbell-user-email"]=e.userEmail;else throw new Error("Missing user email or external ID");return e.userHmac&&(t["x-magicbell-user-hmac"]=e.userHmac),fetch(`${e.host||o}/config`,{method:"GET",headers:t}).then(r=>r.json()).then(r=>{const i=new URL(r.web_push_notifications.subscribe_url);return{host:e.host||o,token:i.searchParams.get("access_token")||null,project:i.searchParams.get("project")||null}})},async getConfig({token:e,project:t,baseURL:r}){const i=[e,t,r].join("-");return h&&f===i?h:fetch(`${r}/web_push_subscriptions?access_token=${e}&project=${t}`,{method:"GET",headers:{"Content-Type":"application/json",Accept:"application/json"}}).then(n=>n.json()).then(n=>(h=n.push_subscription,f=i,h))},async getSubscriptions({token:e,project:t,baseURL:r}){const i=await this.getConfig({token:e,project:t,baseURL:r});if(!i.project.api_key)throw new Error("Missing API key");const n={accept:"application/json","content-type":"application/json","x-magicbell-api-key":i.project.api_key};return i.user.email?n["x-magicbell-user-email"]=i.user.email:i.user.external_id&&(n["x-magicbell-user-external-id"]=i.user.external_id),i.user.hmac&&(n["x-magicbell-user-hmac"]=i.user.hmac),fetch(`${r}/push_subscriptions`,{method:"GET",headers:n}).then(s=>s.json()).then(s=>(s==null?void 0:s.push_subscriptions)||[])},async updateSubscription({token:e,project:t,baseURL:r},i){return fetch(`${r}/web_push_subscriptions?access_token=${e}&project=${t}`,{method:"POST",headers:{"content-type":"application/json",accept:"application/json"},body:JSON.stringify({web_push_subscription:{data:i}})}).then(n=>n.json()).then(n=>n.web_push_subscription)}};function d(){return typeof window>"u"||typeof navigator>"u"?!1:"PushManager"in window&&"serviceWorker"in navigator}async function v(e){await u.getConfig(c(a({},e),{baseURL:e.host||o}))}async function l({path:e="/sw.js"}={}){return navigator.serviceWorker.controller||await navigator.serviceWorker.register(e),navigator.serviceWorker.ready}async function S(e){var s;const t=e.host||o,r=await u.getSubscriptions(c(a({},e),{baseURL:t})),i=await l({path:e.serviceWorkerPath}),n=await((s=i==null?void 0:i.pushManager)==null?void 0:s.getSubscription());return n!=null&&n.endpoint?r.some(p=>p.device_token===n.endpoint):!1}async function x(e){if(!d())throw new Error("Push notifications are not supported in this browser");const t=e.host||o,r=await u.getConfig(c(a({},e),{baseURL:t})),i=await l({path:e.serviceWorkerPath});if(!(i!=null&&i.pushManager))throw new Error("Push notifications are not supported in this browser");const n=await i.pushManager.getSubscription();n&&await n.unsubscribe().catch(()=>{});const s=r.project.vapid_public_key.replace(/=/g,""),p=await i.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:s}).then(w=>w.toJSON());if(!("endpoint"in p))throw new Error("Failed to subscribe to push notifications, browser did not return an subscription endpoint.");await u.updateSubscription(c(a({},e),{baseURL:t}),p)}async function E(e){return u.getAuthToken(e)}exports.getAuthToken=E;exports.isSubscribed=S;exports.isSupported=d;exports.prefetchConfig=v;exports.registerServiceWorker=l;exports.subscribe=x;
//# sourceMappingURL=magicbell-webpush.cjs.min.js.map
