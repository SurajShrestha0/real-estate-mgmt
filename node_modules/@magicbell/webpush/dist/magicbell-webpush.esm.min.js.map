{"version":3,"file":"magicbell-webpush.esm.min.js","sources":["../src/index.ts"],"sourcesContent":["type RequestOptions = {\n  token: string;\n  project: string;\n  baseURL: string;\n};\n\ntype Config = {\n  user: { id: string; email?: string | null; external_id?: string | null; hmac?: string | null };\n  project: { id: number; subdomain: string; api_key: string; vapid_public_key: string };\n  website_push_id: string;\n};\n\ntype SubscribeOptions = {\n  token: string;\n  project: string;\n  serviceWorkerPath?: string;\n  host?: string;\n};\n\ntype Subscription = {\n  created_at: string;\n  device_token: string;\n  discarded_at: string | null;\n  id: string;\n  platform: string;\n  user_id: string;\n};\n\ntype AuthTokenOptions = {\n  host?: string;\n  apiKey: string;\n} & ({ userEmail: string; userHmac?: string } | { userExternalId: string; userHmac?: string });\n\nlet _config: Config | null = null;\nlet _cacheKey = '';\n\nconst DEFAULT_HOST = 'https://api.magicbell.com';\n\nconst api = {\n  async getAuthToken(options: AuthTokenOptions): Promise<Pick<SubscribeOptions, 'token' | 'project' | 'host'>> {\n    const headers: Record<string, string> = {\n      accept: 'application/json',\n      'content-type': 'application/json',\n      'x-magicbell-api-key': options.apiKey,\n    };\n\n    if ('userExternalId' in options && options.userExternalId) {\n      headers['x-magicbell-user-external-id'] = options.userExternalId;\n    } else if ('userEmail' in options && options.userEmail) {\n      headers['x-magicbell-user-email'] = options.userEmail;\n    } else {\n      throw new Error('Missing user email or external ID');\n    }\n\n    if (options.userHmac) {\n      headers['x-magicbell-user-hmac'] = options.userHmac;\n    }\n\n    return fetch(`${options.host || DEFAULT_HOST}/config`, {\n      method: 'GET',\n      headers: headers,\n    })\n      .then((x) => x.json())\n      .then((x) => {\n        const url = new URL(x.web_push_notifications.subscribe_url);\n\n        return {\n          host: options.host || DEFAULT_HOST,\n          token: url.searchParams.get('access_token') || null,\n          project: url.searchParams.get('project') || null,\n        };\n      });\n  },\n\n  async getConfig({ token, project, baseURL }: RequestOptions) {\n    const cacheKey = [token, project, baseURL].join('-');\n    if (_config && _cacheKey === cacheKey) return _config;\n\n    return fetch(`${baseURL}/web_push_subscriptions?access_token=${token}&project=${project}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    })\n      .then((x) => x.json() as Promise<{ push_subscription: Config }>)\n      .then((x) => {\n        _config = x.push_subscription;\n        _cacheKey = cacheKey;\n        return _config;\n      });\n  },\n\n  async getSubscriptions({ token, project, baseURL }: RequestOptions): Promise<Array<Subscription>> {\n    const config = await this.getConfig({ token, project, baseURL });\n    if (!config.project.api_key) throw new Error('Missing API key');\n    const headers: Record<string, string> = {\n      accept: 'application/json',\n      'content-type': 'application/json',\n      'x-magicbell-api-key': config.project.api_key,\n    };\n    if (config.user.email) {\n      headers['x-magicbell-user-email'] = config.user.email;\n    } else if (config.user.external_id) {\n      headers['x-magicbell-user-external-id'] = config.user.external_id;\n    }\n    if (config.user.hmac) {\n      headers['x-magicbell-user-hmac'] = config.user.hmac;\n    }\n    return fetch(`${baseURL}/push_subscriptions`, {\n      method: 'GET',\n      headers,\n    })\n      .then((result) => result.json())\n      .then((result) => result?.push_subscriptions || []);\n  },\n\n  async updateSubscription({ token, project, baseURL }: RequestOptions, subscription: PushSubscriptionJSON) {\n    return fetch(`${baseURL}/web_push_subscriptions?access_token=${token}&project=${project}`, {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n        accept: 'application/json',\n      },\n      body: JSON.stringify({\n        web_push_subscription: {\n          data: subscription,\n        },\n      }),\n    })\n      .then((x) => x.json() as Promise<{ web_push_subscription: { id: string } }>)\n      .then((x) => x.web_push_subscription);\n  },\n};\n\nexport function isSupported() {\n  if (typeof window === 'undefined' || typeof navigator === 'undefined') return false;\n  return 'PushManager' in window && 'serviceWorker' in navigator;\n}\n\nexport async function prefetchConfig(options: SubscribeOptions) {\n  await api.getConfig({ ...options, baseURL: options.host || DEFAULT_HOST });\n}\n\nexport async function registerServiceWorker({ path = '/sw.js' }: { path?: string } = {}) {\n  // don't register a service-worker if there's already one\n  if (navigator.serviceWorker.controller) return navigator.serviceWorker.ready;\n  await navigator.serviceWorker.register(path);\n  return navigator.serviceWorker.ready;\n}\n\n/**\n * Checks if the current user has an active push subscription that is registered by MagicBell.\n */\nexport async function isSubscribed(options: SubscribeOptions): Promise<boolean> {\n  const baseURL = options.host || DEFAULT_HOST;\n  const subscriptions = await api.getSubscriptions({ ...options, baseURL });\n  const registration = await registerServiceWorker({ path: options.serviceWorkerPath });\n  const activeSubscription = await registration?.pushManager?.getSubscription();\n\n  if (!activeSubscription?.endpoint) return false;\n  return subscriptions.some((subscription) => subscription.device_token === activeSubscription.endpoint);\n}\n\n/**\n * Request permission to send push notifications and post the subscription to the MagicBell API.\n */\nexport async function subscribe(options: SubscribeOptions) {\n  if (!isSupported()) {\n    throw new Error('Push notifications are not supported in this browser');\n  }\n\n  const baseURL = options.host || DEFAULT_HOST;\n  const config = await api.getConfig({ ...options, baseURL });\n  const registration = await registerServiceWorker({ path: options.serviceWorkerPath });\n\n  if (!registration?.pushManager) {\n    throw new Error('Push notifications are not supported in this browser');\n  }\n\n  // remove active subscription if there's any\n  const activeSubscription = await registration.pushManager.getSubscription();\n  if (activeSubscription) {\n    await activeSubscription.unsubscribe().catch(() => void 0);\n  }\n\n  // strip the base64 padding, it's either that or convert to uint8array\n  const applicationServerKey = config.project.vapid_public_key.replace(/=/g, '');\n\n  const subscription = await registration.pushManager\n    .subscribe({ userVisibleOnly: true, applicationServerKey })\n    .then((x) => x.toJSON());\n\n  if (!('endpoint' in subscription)) {\n    throw new Error('Failed to subscribe to push notifications, browser did not return an subscription endpoint.');\n  }\n\n  await api.updateSubscription({ ...options, baseURL }, subscription);\n}\n\nexport async function getAuthToken(options: AuthTokenOptions) {\n  return api.getAuthToken(options);\n}\n"],"names":["_config","_cacheKey","DEFAULT_HOST","api","options","headers","x","url","token","project","baseURL","cacheKey","config","result","subscription","isSupported","prefetchConfig","__spreadProps","__spreadValues","registerServiceWorker","path","isSubscribed","_a","subscriptions","registration","activeSubscription","subscribe","applicationServerKey","getAuthToken"],"mappings":"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"}