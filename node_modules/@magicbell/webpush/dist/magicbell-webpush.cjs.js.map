{"version":3,"file":"magicbell-webpush.cjs.js","sources":["../src/index.ts"],"sourcesContent":["type RequestOptions = {\n  token: string;\n  project: string;\n  baseURL: string;\n};\n\ntype Config = {\n  user: { id: string; email?: string | null; external_id?: string | null; hmac?: string | null };\n  project: { id: number; subdomain: string; api_key: string; vapid_public_key: string };\n  website_push_id: string;\n};\n\ntype SubscribeOptions = {\n  token: string;\n  project: string;\n  serviceWorkerPath?: string;\n  host?: string;\n};\n\ntype Subscription = {\n  created_at: string;\n  device_token: string;\n  discarded_at: string | null;\n  id: string;\n  platform: string;\n  user_id: string;\n};\n\ntype AuthTokenOptions = {\n  host?: string;\n  apiKey: string;\n} & ({ userEmail: string; userHmac?: string } | { userExternalId: string; userHmac?: string });\n\nlet _config: Config | null = null;\nlet _cacheKey = '';\n\nconst DEFAULT_HOST = 'https://api.magicbell.com';\n\nconst api = {\n  async getAuthToken(options: AuthTokenOptions): Promise<Pick<SubscribeOptions, 'token' | 'project' | 'host'>> {\n    const headers: Record<string, string> = {\n      accept: 'application/json',\n      'content-type': 'application/json',\n      'x-magicbell-api-key': options.apiKey,\n    };\n\n    if ('userExternalId' in options && options.userExternalId) {\n      headers['x-magicbell-user-external-id'] = options.userExternalId;\n    } else if ('userEmail' in options && options.userEmail) {\n      headers['x-magicbell-user-email'] = options.userEmail;\n    } else {\n      throw new Error('Missing user email or external ID');\n    }\n\n    if (options.userHmac) {\n      headers['x-magicbell-user-hmac'] = options.userHmac;\n    }\n\n    return fetch(`${options.host || DEFAULT_HOST}/config`, {\n      method: 'GET',\n      headers: headers,\n    })\n      .then((x) => x.json())\n      .then((x) => {\n        const url = new URL(x.web_push_notifications.subscribe_url);\n\n        return {\n          host: options.host || DEFAULT_HOST,\n          token: url.searchParams.get('access_token') || null,\n          project: url.searchParams.get('project') || null,\n        };\n      });\n  },\n\n  async getConfig({ token, project, baseURL }: RequestOptions) {\n    const cacheKey = [token, project, baseURL].join('-');\n    if (_config && _cacheKey === cacheKey) return _config;\n\n    return fetch(`${baseURL}/web_push_subscriptions?access_token=${token}&project=${project}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    })\n      .then((x) => x.json() as Promise<{ push_subscription: Config }>)\n      .then((x) => {\n        _config = x.push_subscription;\n        _cacheKey = cacheKey;\n        return _config;\n      });\n  },\n\n  async getSubscriptions({ token, project, baseURL }: RequestOptions): Promise<Array<Subscription>> {\n    const config = await this.getConfig({ token, project, baseURL });\n    if (!config.project.api_key) throw new Error('Missing API key');\n    const headers: Record<string, string> = {\n      accept: 'application/json',\n      'content-type': 'application/json',\n      'x-magicbell-api-key': config.project.api_key,\n    };\n    if (config.user.email) {\n      headers['x-magicbell-user-email'] = config.user.email;\n    } else if (config.user.external_id) {\n      headers['x-magicbell-user-external-id'] = config.user.external_id;\n    }\n    if (config.user.hmac) {\n      headers['x-magicbell-user-hmac'] = config.user.hmac;\n    }\n    return fetch(`${baseURL}/push_subscriptions`, {\n      method: 'GET',\n      headers,\n    })\n      .then((result) => result.json())\n      .then((result) => result?.push_subscriptions || []);\n  },\n\n  async updateSubscription({ token, project, baseURL }: RequestOptions, subscription: PushSubscriptionJSON) {\n    return fetch(`${baseURL}/web_push_subscriptions?access_token=${token}&project=${project}`, {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n        accept: 'application/json',\n      },\n      body: JSON.stringify({\n        web_push_subscription: {\n          data: subscription,\n        },\n      }),\n    })\n      .then((x) => x.json() as Promise<{ web_push_subscription: { id: string } }>)\n      .then((x) => x.web_push_subscription);\n  },\n};\n\nexport function isSupported() {\n  if (typeof window === 'undefined' || typeof navigator === 'undefined') return false;\n  return 'PushManager' in window && 'serviceWorker' in navigator;\n}\n\nexport async function prefetchConfig(options: SubscribeOptions) {\n  await api.getConfig({ ...options, baseURL: options.host || DEFAULT_HOST });\n}\n\nexport async function registerServiceWorker({ path = '/sw.js' }: { path?: string } = {}) {\n  // don't register a service-worker if there's already one\n  if (navigator.serviceWorker.controller) return navigator.serviceWorker.ready;\n  await navigator.serviceWorker.register(path);\n  return navigator.serviceWorker.ready;\n}\n\n/**\n * Checks if the current user has an active push subscription that is registered by MagicBell.\n */\nexport async function isSubscribed(options: SubscribeOptions): Promise<boolean> {\n  const baseURL = options.host || DEFAULT_HOST;\n  const subscriptions = await api.getSubscriptions({ ...options, baseURL });\n  const registration = await registerServiceWorker({ path: options.serviceWorkerPath });\n  const activeSubscription = await registration?.pushManager?.getSubscription();\n\n  if (!activeSubscription?.endpoint) return false;\n  return subscriptions.some((subscription) => subscription.device_token === activeSubscription.endpoint);\n}\n\n/**\n * Request permission to send push notifications and post the subscription to the MagicBell API.\n */\nexport async function subscribe(options: SubscribeOptions) {\n  if (!isSupported()) {\n    throw new Error('Push notifications are not supported in this browser');\n  }\n\n  const baseURL = options.host || DEFAULT_HOST;\n  const config = await api.getConfig({ ...options, baseURL });\n  const registration = await registerServiceWorker({ path: options.serviceWorkerPath });\n\n  if (!registration?.pushManager) {\n    throw new Error('Push notifications are not supported in this browser');\n  }\n\n  // remove active subscription if there's any\n  const activeSubscription = await registration.pushManager.getSubscription();\n  if (activeSubscription) {\n    await activeSubscription.unsubscribe().catch(() => void 0);\n  }\n\n  // strip the base64 padding, it's either that or convert to uint8array\n  const applicationServerKey = config.project.vapid_public_key.replace(/=/g, '');\n\n  const subscription = await registration.pushManager\n    .subscribe({ userVisibleOnly: true, applicationServerKey })\n    .then((x) => x.toJSON());\n\n  if (!('endpoint' in subscription)) {\n    throw new Error('Failed to subscribe to push notifications, browser did not return an subscription endpoint.');\n  }\n\n  await api.updateSubscription({ ...options, baseURL }, subscription);\n}\n\nexport async function getAuthToken(options: AuthTokenOptions) {\n  return api.getAuthToken(options);\n}\n"],"names":[],"mappings":"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"}